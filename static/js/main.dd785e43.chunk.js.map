{"version":3,"sources":["locales/index.ts","components/Header.tsx","containers/home/components/SearchField.tsx","config.ts","containers/home/components/VersionSelector.tsx","containers/home/components/ProfileDetails.tsx","containers/home/home.tsx","containers/not-found/not-found.tsx","App.tsx","reportWebVitals.ts","locales/translations.ts","i18n.ts","index.tsx"],"names":["locales","ca","en","es","de","fr","it","no","pl","tr","Header","useTranslation","t","i18n","languageSwitchAnchorEl","useRef","React","useState","showLanguageSwitch","toggleLanguageSwitch","AppBar","position","className","Toolbar","Typography","variant","style","flexGrow","Box","Button","aria-controls","aria-haspopup","color","onClick","ref","language","Menu","id","open","anchorEl","current","onClose","Object","keys","map","l","MenuItem","value","changeLanguage","handleLanguageChange","Checkbox","size","checked","overviewData","SearchField","selectedVersion","onProfileChange","searchData","setSearchData","working","toggleWorking","getSearchData","useCallback","a","overview","searchDataArray","Axios","get","process","response","data","profiles","forEach","profile","titles","title","push","search","vendor","model","useEffect","then","_searchData","isEqual","CircularProgress","Autocomplete","options","getOptionLabel","option","renderInput","params","TextField","fullWidth","label","filterOptions","inputValue","throttle","matchSorter","replaceAll","slice","onChange","_","searchDataRow","config","show_help","versions","SNAPSHOT","default_version","image_url","info_url","VersionSelector","onVersionChange","FormControl","InputLabel","Select","labelWidth","labelId","event","version","target","getTitle","profilesData","ProfileDetails","selectedProfile","setProfileData","getHelpKey","type","lc","toLowerCase","includes","getProfileData","profileData","_profileData","buildAt","Date","build_at","paddingTop","paddingBottom","component","align","TableContainer","Table","TableBody","TableRow","TableCell","join","version_number","version_code","toLocaleString","titleString","infoUrl","replace","encodeURI","Link","href","length","Launch","marginLeft","verticalAlign","reduce","prev","curr","display","marginRight","TableHead","images","i","endIcon","CloudDownload","p","sha256","Home","setSelectedVersion","setSelectedProfile","Container","paddingY","Paper","padding","Grid","container","spacing","item","xs","page404Styles","makeStyles","theme","root","NotFound","classes","marginTop","elevation","createMuiTheme","palette","primary","main","secondary","App","ThemeProvider","Suspense","fallback","LinearProgress","path","default","hidden","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","translations","resources","translation","use","LanguageDetector","initReactI18next","init","fallbackLng","debug","REACT_APP_I18N_DEBUG","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd785e43.chunk.js","sourcesContent":["type Locales = {\n  [key: string]: string;\n};\n\nconst locales: Locales = {\n  ca: 'Català',\n  en: 'English',\n  es: 'Español',\n  de: 'Deutsch',\n  fr: 'Français',\n  it: 'Italiano',\n  no: 'Norsk',\n  pl: 'Polski',\n  tr: 'Türkçe',\n};\n\nexport default locales;\n","import React, { FunctionComponent, useRef } from 'react';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport {\n  AppBar,\n  Box,\n  Button,\n  Menu,\n  MenuItem,\n  Checkbox,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport locales from '../locales';\nimport '../App.scss';\n\nconst Header: FunctionComponent = () => {\n  const { t, i18n } = useTranslation();\n\n  const languageSwitchAnchorEl = useRef<null | HTMLButtonElement>(null);\n  const [showLanguageSwitch, toggleLanguageSwitch] = React.useState(false);\n\n  const handleLanguageChange = (l: string) => {\n    i18n.changeLanguage(l);\n  };\n\n  const openChangeLanguagePopper = () => {\n    toggleLanguageSwitch(!showLanguageSwitch);\n  };\n\n  return (\n    <AppBar position=\"sticky\" className=\"header\">\n      <Toolbar>\n        <Typography variant=\"h6\">{t('tr-title')}</Typography>\n        <span className=\"title-mobile\">{t('tr-title')}</span>\n        <div style={{ flexGrow: 1 }} />\n        <Box position=\"relative\">\n          <Button\n            aria-controls=\"language-menu\"\n            aria-haspopup=\"true\"\n            color=\"secondary\"\n            variant=\"contained\"\n            onClick={openChangeLanguagePopper}\n            ref={languageSwitchAnchorEl}\n          >\n            <span className=\"language-toggle-text\">\n              {i18n.language ? locales[i18n.language] : 'change language'} &nbsp;\n            </span>\n            <TranslateIcon />\n          </Button>\n          <Menu\n            id=\"language-menu\"\n            open={showLanguageSwitch}\n            anchorEl={languageSwitchAnchorEl.current}\n            onClose={() => toggleLanguageSwitch(false)}\n          >\n            {Object.keys(locales).map((l) => (\n              <MenuItem key={l} value={l} onClick={() => handleLanguageChange(l)}>\n                <Checkbox size=\"small\" checked={i18n.language === l} /> {t(locales[l])}\n              </MenuItem>\n            ))}\n          </Menu>\n        </Box>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\nimport { CircularProgress, TextField } from '@material-ui/core';\nimport { Autocomplete, AutocompleteRenderInputParams, FilterOptionsState } from '@material-ui/lab';\nimport Axios from 'axios';\nimport { isEqual, throttle } from 'lodash';\nimport { matchSorter } from 'match-sorter';\nimport { useTranslation } from 'react-i18next';\n\nimport { Overview, ProfilesEntity } from '../../../types/overview';\n\ntype Props = {\n  selectedVersion: string;\n  onProfileChange: (profile: ProfilesEntity) => void;\n};\n\ntype SearchData = { value: ProfilesEntity; search: string; title: string };\n\nconst overviewData: { [key: string]: Overview } = {};\n\nconst SearchField: FunctionComponent<Props> = ({ selectedVersion, onProfileChange }) => {\n  const [searchData, setSearchData] = useState<SearchData[]>([]);\n  const [working, toggleWorking] = useState<boolean>(true);\n  const { t } = useTranslation();\n\n  const getSearchData = useCallback(async () => {\n    let overview = overviewData[selectedVersion];\n    const searchDataArray: SearchData[] = [];\n\n    toggleWorking(true);\n\n    if (!overview) {\n      const response = await Axios.get<Overview>(\n        `${process.env.PUBLIC_URL}/data/${selectedVersion}/overview.json`\n      );\n      overview = response.data;\n      overviewData[selectedVersion] = overview;\n    }\n\n    toggleWorking(false);\n\n    overview.profiles?.forEach((profile) => {\n      profile.titles?.forEach((title) => {\n        searchDataArray.push({\n          value: profile,\n          search: profile.id + title.title,\n          title: title.title || `${title.vendor} ${title.model}`,\n        });\n      });\n    });\n\n    return searchDataArray;\n  }, [selectedVersion]);\n\n  useEffect(() => {\n    getSearchData().then((_searchData) => {\n      if (!isEqual(_searchData, searchData)) setSearchData(_searchData);\n    });\n  }, [getSearchData, searchData, selectedVersion]);\n\n  const handleProfileSelect = (_: unknown, searchDataRow: SearchData | null) => {\n    if (!searchDataRow) return;\n    onProfileChange(searchDataRow.value);\n  };\n\n  const getOptionLabel = (option: SearchData) => option.title;\n\n  const renderInput = (params: AutocompleteRenderInputParams) => (\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    <TextField {...params} fullWidth variant=\"outlined\" label={t('tr-model')} />\n  );\n\n  const filterOptions: (\n    options: SearchData[],\n    state: FilterOptionsState<SearchData>\n  ) => SearchData[] = (options, { inputValue }) =>\n    throttle(\n      () =>\n        matchSorter(options, inputValue.replaceAll(' ', ''), {\n          keys: ['search'],\n        }).slice(0, 10),\n      1000\n    )() || [];\n\n  if (working) return <CircularProgress />;\n\n  return (\n    <Autocomplete\n      options={searchData}\n      getOptionLabel={getOptionLabel}\n      renderInput={renderInput}\n      filterOptions={filterOptions}\n      onChange={handleProfileSelect}\n    />\n  );\n};\n\nexport default SearchField;\n","/* exported config */\n\nconst config = {\n  // Show help text for images\n  show_help: true,\n\n  // Path to overview.json file or URL to the ASU API\n  versions: { '19.07.5': 'data/19.07.5', SNAPSHOT: 'data/SNAPSHOT' },\n\n  // Pre-selected version (optional)\n  default_version: '19.07.5',\n\n  // Image download URL (optional)\n  image_url: 'https://downloads.openwrt.org/releases/{version}/{target}',\n\n  // Info link URL (optional)\n  info_url: 'https://openwrt.org/start?do=search&id=toh&q={title}',\n\n  // Build custom images (optional)\n  // See https://github.com/aparcar/asu\n  // asu_url: 'https://chef.libremesh.org'\n};\n\nexport default config;\n","import React, { FunctionComponent } from 'react';\nimport { FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport config from '../../../config';\n\ntype Props = {\n  selectedVersion: string;\n  onVersionChange: (version: string) => void;\n};\n\nconst VersionSelector: FunctionComponent<Props> = ({ selectedVersion, onVersionChange }) => {\n  const { versions } = config;\n  const { t } = useTranslation();\n\n  const handleVersionChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    const version: string = event.target.value as string;\n    onVersionChange(version);\n  };\n\n  return (\n    <FormControl fullWidth variant=\"outlined\">\n      <InputLabel id=\"version-select-label\">{t('tr-version')}</InputLabel>\n      <Select\n        labelWidth={60}\n        labelId=\"version-select-label\"\n        value={selectedVersion}\n        onChange={handleVersionChange}\n      >\n        {Object.keys(versions).map((version) => (\n          <MenuItem value={version} key={version}>\n            {version}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default VersionSelector;\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\nimport {\n  Box,\n  Button,\n  CircularProgress,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from '@material-ui/core';\nimport { Launch, CloudDownload } from '@material-ui/icons';\nimport Axios from 'axios';\nimport { isEqual } from 'lodash';\nimport { useTranslation } from 'react-i18next';\n\nimport { ProfilesEntity } from '../../../types/overview';\nimport { Profile, TitlesEntity } from '../../../types/profile';\nimport config from '../../../config';\n\ntype Props = {\n  selectedVersion: string;\n  selectedProfile: ProfilesEntity;\n};\n\nconst getTitle = (title: TitlesEntity) => {\n  return title.title || `${title.vendor} ${title.model}`;\n};\n\nconst profilesData: { [key: string]: Profile } = {};\n\nconst ProfileDetails: FunctionComponent<Props> = ({ selectedVersion, selectedProfile }) => {\n  const [profile, setProfileData] = useState<Profile>();\n  const [working, toggleWorking] = useState<boolean>(true);\n  const { t } = useTranslation();\n\n  const getHelpKey = (type: string) => {\n    const lc = type.toLowerCase();\n    if (lc.includes('sysupgrade')) {\n      return 'sysupgrade-help';\n    }\n    if (lc.includes('factory') || lc === 'trx' || lc === 'chk') {\n      return 'factory-help';\n    }\n    if (lc.includes('kernel') || lc.includes('zimage') || lc.includes('uimage')) {\n      return 'kernel-help';\n    }\n    if (lc.includes('root')) {\n      return 'rootfs-help';\n    }\n    if (lc.includes('sdcard')) {\n      return 'sdcard-help';\n    }\n    if (lc.includes('tftp')) {\n      return 'tftp-help';\n    }\n    return 'other-help';\n  };\n\n  const getProfileData = useCallback(async () => {\n    let profileData = profilesData[selectedProfile.id];\n\n    toggleWorking(true);\n\n    if (!profileData) {\n      const response = await Axios.get<Profile>(\n        `${process.env.PUBLIC_URL}/data/${selectedVersion}/${selectedProfile.target}/${selectedProfile.id}.json`\n      );\n      profileData = response.data;\n      profilesData[selectedProfile.id] = profileData;\n    }\n\n    toggleWorking(false);\n\n    return profileData;\n  }, [selectedVersion, selectedProfile]);\n\n  useEffect(() => {\n    if (selectedVersion && selectedProfile) {\n      getProfileData().then((_profileData) => {\n        if (!isEqual(profile, _profileData)) setProfileData(_profileData);\n      });\n    }\n  }, [selectedVersion, selectedProfile, getProfileData, profile]);\n\n  if (working || !profile) return <CircularProgress />;\n\n  const buildAt = new Date(profile.build_at);\n\n  return (\n    <>\n      <Box paddingTop={3} paddingBottom={2}>\n        <Typography variant=\"h6\" component=\"h1\" align=\"left\">\n          {t('tr-version-build')}\n        </Typography>\n      </Box>\n\n      <TableContainer>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>{t('tr-model')}</TableCell>\n              <TableCell>{profile.titles?.map((title) => getTitle(title)).join(', ')}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>{t('tr-target')}</TableCell>\n              <TableCell>{profile.target}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>{t('tr-version')}</TableCell>\n              <TableCell>\n                {profile.version_number} ({profile.version_code})\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>{t('tr-date')}</TableCell>\n              <TableCell>{buildAt.toLocaleString()}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Info</TableCell>\n              {profile.titles && (\n                <TableCell>\n                  {profile.titles\n                    .map<React.ReactNode>((title) => {\n                      const titleString = getTitle(title);\n                      const infoUrl = config.info_url\n                        .replace('{title}', encodeURI(titleString))\n                        .replace('{target}', profile.target)\n                        .replace('{id}', profile.id)\n                        .replace('{version}', profile.version_number);\n\n                      return (\n                        <Link href={infoUrl}>\n                          {/* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */}\n                          {profile.titles!.length > 1 && (\n                            <Typography component=\"span\">{titleString}</Typography>\n                          )}\n                          <Launch\n                            style={{\n                              marginLeft: 10,\n                              verticalAlign: 'middle',\n                            }}\n                          />\n                        </Link>\n                      );\n                    })\n                    .reduce((prev, curr) => [\n                      prev,\n                      <Box display=\"inline-block\" marginRight={2} />,\n                      curr,\n                    ])}\n                </TableCell>\n              )}\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Box paddingTop={3} paddingBottom={2}>\n        <Typography variant=\"h6\" component=\"h1\" align=\"left\">\n          {t('tr-downloads')}\n        </Typography>\n      </Box>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Download link</TableCell>\n              <TableCell>Help Text</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {profile.images?.map((i) => (\n              <TableRow>\n                <TableCell>\n                  <Button endIcon={<CloudDownload />} variant=\"contained\" color=\"primary\">\n                    {i.type}\n                  </Button>\n                </TableCell>\n                <TableCell>\n                  <Box p={1}>\n                    <Typography>{t(`tr-${getHelpKey(i.type)}`)}</Typography>\n                    <Typography variant=\"caption\">sha256sum: {i.sha256}</Typography>\n                  </Box>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default ProfileDetails;\n","import React, { FunctionComponent, useState } from 'react';\nimport { Container, Paper, Box, Typography, Grid } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport SearchField from './components/SearchField';\nimport VersionSelector from './components/VersionSelector';\nimport ProfileDetails from './components/ProfileDetails';\nimport config from '../../config';\nimport { ProfilesEntity } from '../../types/overview';\n\nconst Home: FunctionComponent = () => {\n  const [selectedVersion, setSelectedVersion] = useState(Object.keys(config.versions)[0]);\n  const [selectedProfile, setSelectedProfile] = useState<ProfilesEntity | null>();\n  const { t } = useTranslation();\n\n  const onVersionChange = (version: string) => {\n    setSelectedVersion(version);\n  };\n\n  const onProfileChange = (profile: ProfilesEntity) => {\n    setSelectedProfile(profile);\n  };\n\n  return (\n    <Container>\n      <Box paddingY={4}>\n        <Paper>\n          <Box padding={3}>\n            <Box paddingBottom={2}>\n              <Typography variant=\"h4\" component=\"h1\" align=\"left\">\n                {t('tr-load')}\n              </Typography>\n            </Box>\n            <Box paddingBottom={2}>\n              <Typography variant=\"h6\" component=\"h2\" align=\"left\">\n                {t('tr-message')}\n              </Typography>\n            </Box>\n            <Grid container spacing={2}>\n              <Grid item xs>\n                <SearchField selectedVersion={selectedVersion} onProfileChange={onProfileChange} />\n              </Grid>\n              <Grid item xs={3}>\n                <VersionSelector\n                  selectedVersion={selectedVersion}\n                  onVersionChange={onVersionChange}\n                />\n              </Grid>\n            </Grid>\n            {selectedProfile && (\n              <Box>\n                <ProfileDetails\n                  selectedProfile={selectedProfile}\n                  selectedVersion={selectedVersion}\n                />\n              </Box>\n            )}\n          </Box>\n        </Paper>\n      </Box>\n    </Container>\n  );\n};\n\nexport default Home;\n","import React, { FunctionComponent } from 'react';\nimport { Container, Paper, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst page404Styles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(3, 2),\n  },\n}));\n\nconst NotFound: FunctionComponent = () => {\n  const classes = page404Styles();\n  return (\n    <Container style={{ marginTop: '50px' }}>\n      <Paper className={classes.root} elevation={3}>\n        <Typography variant=\"h5\" component=\"h3\">\n          404 Page Not Found\n        </Typography>\n        <Typography component=\"p\">Please head to the home.</Typography>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default NotFound;\n","import React, { FunctionComponent } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.scss';\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { Paper, Toolbar } from '@material-ui/core';\nimport Header from './components/Header';\nimport Home from './containers/home/home';\nimport NotFound from './containers/not-found/not-found';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3F51B5',\n    },\n    secondary: {\n      main: '#009688',\n    },\n  },\n});\n\nconst App: FunctionComponent = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <React.Suspense fallback={<LinearProgress />}>\n        <div className=\"App\">\n          <Header />\n          <Router>\n            <Switch>\n              <Route path=\"\" component={Home} />\n              <Route default component={NotFound} />\n            </Switch>\n          </Router>\n          <Toolbar hidden />\n          <Paper elevation={4} className=\"report-problem-container\">\n            <span>\n              If you come across any issue, feel free to report{' '}\n              <a href=\"https://github.com/aparcar/attendedsysupgrade-server/issues\">here</a>.\n            </span>\n            <span className=\"report-link\">\n              For contributions, go to{' '}\n              <a href=\"https://github.com/sudhanshu16/openwrt-firmware-selector/\">Github</a>\n            </span>\n          </Paper>\n        </div>\n      </React.Suspense>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* exported translations */\n\nconst translations = {\n  ca: {\n    'tr-load': 'Descarregueu el microprogramari OpenWrt per al vostre dispositiu',\n    'tr-title': 'Selector de microprogramari OpenWrt',\n    'tr-message':\n      'Introduïu el nom o el model del vostre dispositiu i seleccioneu la versió estable (per defecte) o la darrera imatge compilada (\"snapshot\")',\n    'tr-version-build': 'Compilació',\n    'tr-custom-build': 'Compilació personalitzada',\n    'tr-customize': 'Personalitzar',\n    'tr-request-build': 'Demanar la compilació',\n    'tr-model': 'Model',\n    'tr-target': 'Plataforma',\n    'tr-version': 'Versió',\n    'tr-date': 'Data',\n    'tr-downloads': 'Descàrregues',\n    'tr-custom-downloads': 'Descàrregues personalitzades',\n    'tr-factory-help':\n      'Empreu la imatge \"factory\" per instal·lar OpenWrt a un dispositius per primera vegada. Normalment ho podreu fer través de la interfície web del microprogramari original.',\n    'tr-sysupgrade-help':\n      'Empreu la imatge \"sysupgrade\" per actualitzar un dispositiu que ja tingui OpenWrt instal·lat. La imatge es pot instal·lar a través de la interfície web LuCI o del terminal.',\n    'tr-kernel-help': 'El nucli de Linux en una imatge separada.',\n    'tr-rootfs-help': 'El sistema de fitxers arrel en una imatge separada.',\n    'tr-sdcard-help': 'Una imatge feta per escriure-la a una targeta SD.',\n    'tr-tftp-help':\n      \"Les imatges TFTP images es fan servir per instal·lar-les a un dispositiu mitjançant el mètode TFTP del carregador d'arrencada.\",\n    'tr-other-help': \"Un altre tipus d'imatge.\",\n    'tr-build-successful': 'La compilació ha tingut èxit',\n    'tr-build-failed': 'La compilació ha fallat',\n    'tr-request-image': 'Demanar la imatge',\n    'tr-check-again': \"Proveu de nou d'aquí 5 segons...\",\n  },\n  en: {\n    'tr-server-link': 'Files',\n    'tr-notfound': 'No model found!',\n    'tr-load': 'Download OpenWrt Firmware for your Device',\n    'tr-title': 'OpenWrt Firmware Selector',\n    'tr-message':\n      'Type the name or model of your device, then select the recommended build or some other.',\n    'tr-version-build': 'About this build',\n    'tr-custom-build': 'Custom Build',\n    'tr-customize': 'Customize',\n    'tr-request-build': 'Request Build',\n    'tr-model': 'Model',\n    'tr-target': 'Platform',\n    'tr-version': 'Version',\n    'tr-date': 'Date',\n    'tr-downloads': 'Download an image',\n    'tr-custom-downloads': 'Custom Downloads',\n    'tr-factory-help':\n      'Use a Factory image to flash a router with OpenWrt for the first time. You normally do this via the web interface of the original firmware.',\n    'tr-sysupgrade-help':\n      'Use a Sysupgrade image to update a router that already runs OpenWrt. The image can be used with the LuCI web interface or the terminal.',\n    'tr-kernel-help': 'Linux kernel as a separate image.',\n    'tr-rootfs-help': 'Root file system as a separate image.',\n    'tr-sdcard-help': 'Image that is meant to be flashed onto a SD-Card.',\n    'tr-tftp-help': 'TFTP images are used to flash a device via the TFTP method of the bootloader.',\n    'tr-other-help': 'Other image type.',\n    'tr-build-successful': 'Build successful',\n    'tr-build-failed': 'Build failed',\n    'tr-request-image': 'Request image',\n    'tr-check-again': 'Check again in 5 seconds...',\n  },\n  es: {\n    'tr-notfound': '¡Modelo no encontrado!',\n    'tr-load': 'Descargue el firmware OpenWrt para su dispositivo',\n    'tr-title': 'Selector de firmware OpenWrt',\n    'tr-message':\n      'Escriba el nombre o modelo de su dispositivo, luego seleccione la versión recomendada o alguna otra.',\n    'tr-version-build': 'Acerca de esta compilación',\n    'tr-custom-build': 'Compilación personalizada',\n    'tr-customize': 'Personalizar',\n    'tr-request-build': 'Solicitar compilación',\n    'tr-model': 'Modelo',\n    'tr-target': 'Plataforma',\n    'tr-version': 'Versión',\n    'tr-date': 'Date',\n    'tr-downloads': 'Descargar una imagen',\n    'tr-custom-downloads': 'Descargas personalizadas',\n    'tr-factory-help':\n      'Utilice una imagen factory para instalar OpenWrt en un enrutador por primera vez. Normalmente se hace a través de la interfaz web del firmware original.',\n    'tr-sysupgrade-help':\n      'Utilice una imagen sysupgrade para actualizar un enrutador que ya ejecuta OpenWrt. La imagen se puede utilizar con la interfaz web de LuCI o el terminal.',\n    'tr-kernel-help': 'Kernel de Linux como una imagen separada.',\n    'tr-rootfs-help': 'Sistema de archivos raíz como una imagen separada.',\n    'tr-sdcard-help': 'Imagen destinada a flashear en una tarjeta SD.',\n    'tr-tftp-help':\n      'Las imágenes TFTP se utilizan para actualizar un dispositivo mediante el método TFTP del gestor de arranque.',\n    'tr-other-help': 'Otro tipo de imagen.',\n    'tr-build-successful': 'Compilación exitosa',\n    'tr-build-failed': 'Compilación fallida',\n    'tr-request-image': 'Solicitar imagen',\n    'tr-check-again': 'Vuelva a comprobar en 5 segundos...',\n  },\n  no: {\n    'tr-load': 'Last ned OpenWrt fastvare for din enhet!',\n    'tr-title': 'OpenWrt fastvare utvelger',\n    'tr-message': 'Bruk feltene nedenfor for å laste ned fastvare til enheten din!',\n    'tr-version-build': 'Sammensetning',\n    'tr-custom-build': 'Tilpasset sammensetning',\n    'tr-customize': 'Tilpasse',\n    'tr-request-build': 'Be om sammensetning',\n    'tr-model': 'Modell',\n    'tr-target': 'Platform',\n    'tr-version': 'Versjon',\n    'tr-date': 'Dato',\n    'tr-downloads': 'Nedlastninger',\n    'tr-custom-downloads': 'Tilpassede nedlastninger',\n    'tr-factory-help':\n      'Factory avbildningen er for å laste rutere med OpenWrt første gang. Vanligvis via webgrensesnittet til den originale fastvaren.',\n    'tr-sysupgrade-help':\n      'Sysupgrade avbildningen er for rutere som allerede benytter OpenWrt. Avbildningen innstaleres gjennom webgrensesnittet eller terminalen.',\n    'tr-kernel-help': 'Linux kjernen som en egen avbildning.',\n    'tr-rootfs-help': 'Rotfilsystem som en egen avbildning.',\n    'tr-sdcard-help': 'Avbildning som er ment for et SD-kort.',\n    'tr-tftp-help':\n      'TFTP avbildninger er for å laste enheter via TFTP metoden i oppstartsprosedyren.',\n    'tr-other-help': 'Andre avbildningstyper.',\n    'tr-build-successful': 'Vellykket sammensetning',\n    'tr-build-failed': 'Sammensetningen feilet',\n    'tr-request-image': 'Be om avbildning',\n    'tr-check-again': 'Sjekk pånytt om 5 sekunder...',\n  },\n  de: {\n    'tr-server-link': 'Dateien',\n    'tr-notfound': 'Kein Model gefunden!',\n    'tr-load': 'Lade die OpenWrt Firmware für dein Gerät!',\n    'tr-title': 'OpenWrt Firmware Selector',\n    'tr-message': 'Bitte benutze die Eingabe um die passende Firmware zu finden!',\n    'tr-version-build': 'Release Build',\n    'tr-custom-build': 'Custom Build',\n    'tr-customize': 'Customize',\n    'tr-request-build': 'Request Build',\n    'tr-model': 'Model',\n    'tr-target': 'Target',\n    'tr-version': 'Version',\n    'tr-date': 'Datum',\n    'tr-downloads': 'Downloads',\n    'tr-custom-downloads': 'Custom Downloads',\n    'tr-factory-help':\n      'Factory Abbilder werden über die Weboberfläche der originalen Firmware eingespielt.',\n    'tr-sysupgrade-help':\n      'Sysupgrade Abbilder werden für Geräte verwendet, die bereits OpenWrt laufen haben. Es ist möglich, existierende Einstellungen beizubehalten.',\n    'tr-kernel-help': 'Linux Kernel als separates Abbild.',\n    'tr-rootfs-help': 'Das Root Dateisystem als separates Abbild.',\n    'tr-sdcard-help': 'Image für SD Speicherkarten.',\n    'tr-tftp-help':\n      'TFTP Dateien können verwendet werden, um ein Gerät über die TFTP Method des Bootloader zu flashen.',\n    'tr-other-help': 'Sonstiger Imagetyp.',\n    'tr-build-successful': 'Build erfolgreich',\n    'tr-build-failed': 'Build fehlgeschlagen',\n    'tr-request-image': 'Frage nach image',\n    'tr-check-again': 'Nochmal nachfragen in 5 Sekunden...',\n  },\n  fr: {\n    'tr-load': 'Télécharger le firmware OpenWrt de votre périphérique !',\n    'tr-title': 'Sélecteur de Firmware',\n    'tr-message':\n      'Utiliser les entrées ci-dessous pour télécharger le firmware de votre périphérique !',\n    'tr-version-build': 'Build',\n    'tr-custom-build': 'Build Personnalisé',\n    'tr-customize': 'Personnalisation',\n    'tr-request-build': 'Requête de Build',\n    'tr-model': 'Modèle',\n    'tr-target': 'Platform',\n    'tr-version': 'Version',\n    'tr-date': 'Date',\n    'tr-downloads': 'Téléchargements',\n    'tr-custom-downloads': 'Téléchargements Personnalusés',\n    'tr-factory-help':\n      \"Les images Factory sont prévues pour flasher les routers avec OpenWrt pour la première fois. Habituellement à partir de l'interface web du firmware d'origine.\",\n    'tr-sysupgrade-help':\n      \"Les images Sysupgrade sont prévues pour flasher les routers fonctionnant déjà avec OpenWrt. L'image peut être installée à travers l'interface web ou par le terminal.\",\n    'tr-kernel-help': 'Linux kernel comme image séparée.',\n    'tr-rootfs-help': 'Root file system comme image séparée.',\n    'tr-sdcard-help': 'Image prévue pour être flashée sur une carte SD.',\n    'tr-tftp-help':\n      'TFTP images prévues pour flasher le périphérique via le démarrage par méthode TFTP.',\n    'tr-other-help': \"Autre type d'image.\",\n    'tr-build-successful': 'Succès du Build',\n    'tr-build-failed': 'Échec du Build',\n    'tr-request-image': \"Demade d'image\",\n    'tr-check-again': 'Essayer à nouveau dans 5 secondes...',\n  },\n  it: {\n    'tr-load': 'Scarica il firmware OpenWrt per il tuo dispositivo!',\n    'tr-title': 'OpenWrt Firmware Selector',\n    'tr-message': 'Usa la casella sottostante per scaricare il firmware per il tuo dispositivo!',\n    'tr-version-build': 'Build',\n    'tr-custom-build': 'Custom Build',\n    'tr-customize': 'Personalizza',\n    'tr-request-build': 'Richiedi Build',\n    'tr-model': 'Modell',\n    'tr-target': 'Platform',\n    'tr-version': 'Version',\n    'tr-date': 'Data',\n    'tr-downloads': 'Downloads',\n    'tr-custom-downloads': 'Download Personalizzati',\n    'tr-factory-help':\n      \"Factory Image sono usate per installare OpenWrt su router per la prima volta. Di solito l'immagine può essere applicata via l'interfaccia web del firmware originale.\",\n    'tr-sysupgrade-help':\n      \"Sysupgrade Image sono usate per flashare router in cui OpenWrt è già installato. L'immagine può essere applicata via interfaccia web o terminale.\",\n    'tr-kernel-help': 'Linux kernel come immagine separata.',\n    'tr-rootfs-help': 'Root file system come immagine separata.',\n    'tr-sdcard-help': 'Immagine da flashare su scheda SD-Card separata.',\n    'tr-tftp-help':\n      'Immagini TFTP images sono usate per flashare un dispositivo con il metodo TFTP del bootloader.',\n    'tr-other-help': 'Other image type.',\n    'tr-build-successful': 'Build compilata con successo',\n    'tr-build-failed': 'Build fallita',\n    'tr-request-image': 'Richiedi immagine',\n    'tr-check-again': 'Prova di nuovo in 5 secondi...',\n  },\n  pl: {\n    'tr-server-link': 'Pliki',\n    'tr-notfound': 'Nie znaleziono modelu!',\n    'tr-load': 'Pobieranie oprogramowania OpenWrt',\n    'tr-title': 'OpenWrt Firmware Selector',\n    'tr-message':\n      'Wprowadź nazwę lub model swojego urządzenia, a następnie wybierz wersję zalecaną lub inną.',\n    'tr-version-build': 'Informacje o obrazie',\n    'tr-custom-build': 'Informacje o zmodyfikowanym obrazie',\n    'tr-customize': 'Modyfikacja',\n    'tr-request-build': 'Żądanie budowy obrazu',\n    'tr-model': 'Model',\n    'tr-target': 'Platforma',\n    'tr-version': 'Wersja',\n    'tr-date': 'Data',\n    'tr-downloads': 'Obrazy do pobrania',\n    'tr-custom-downloads': 'Zmodyfikowane obrazy do pobrania',\n    'tr-factory-help':\n      'Użyj obrazu factory do pierwszej instalacji OpenWrt. Zwykle można go użyć wykorzystując interfejs graficzny oryginalnego oprogramowania.',\n    'tr-sysupgrade-help':\n      'Użyj obrazu sysuprade do aktualizacji routera z zainstalowanym już OpenWrt. Obraz można użyć przez interfejs graficzny LuCI lub konsolę.',\n    'tr-kernel-help': 'Osobny obraz z kernelem linuksowym.',\n    'tr-rootfs-help': 'Osobny obraz z systemem plików.',\n    'tr-sdcard-help': 'Obraz do wgrania na kartę SD.',\n    'tr-tftp-help':\n      'Obraz TFTP służący do aktualizacji urządzenia z wykorzystaniem metody TFTP bootloadera.',\n    'tr-other-help': 'Inny typ obrazu.',\n    'tr-build-successful': 'Budowanie zakończone pomyślnie',\n    'tr-build-failed': 'Błąd budowania',\n    'tr-request-image': 'Żądanie obrazu',\n    'tr-check-again': 'Sprawdź ponownie za 5 sekund...',\n  },\n  tr: {\n    'tr-load': 'Cihazınız için OpenWrt yazılımını indirin!',\n    'tr-title': 'OpenWrt Yazılım Seçicisi',\n    'tr-message':\n      'Cihazınızın adını/modelini girin, ardından Stabil sürümü(varsayılan) veya nightly \"snapshot\" imajini seçin.',\n    'tr-version-build': 'Sürüm',\n    'tr-custom-build': 'Özel Sürüm',\n    'tr-customize': 'Özelleştir',\n    'tr-request-build': 'Sürüm Oluştur',\n    'tr-model': 'Model',\n    'tr-target': 'Platform',\n    'tr-version': 'Versiyon',\n    'tr-date': 'Tarih',\n    'tr-downloads': 'İndirmeler',\n    'tr-custom-downloads': 'Özel İndirmeler',\n    'tr-factory-help':\n      'Bir yönlendiriciyi OpenWrt ile ilk kez flashlamak için bir Fabrika imaji kullanın. Bu normalde orijinal aygıt yazılımının web arayüzü aracılığıyla yapılır.',\n    'tr-sysupgrade-help':\n      'Zaten OpenWrt çalıştıran bir yönlendiriciyi güncellemek için bir Sysupgrade imajı kullanın. Imaj, LuCI web arayüzü veya terminal ile kullanılabilir.',\n    'tr-kernel-help': 'Linux kernel ayrı bir imaj olarak.',\n    'tr-rootfs-help': 'Kök Dosya Sistemi ayrı bir imaj olarak.',\n    'tr-sdcard-help': \"SD-Kart 'a kurulması planlanan imaj\",\n    'tr-tftp-help':\n      \"TFTP imajları, Bootloader 'ın TFTP yöntemi ile bir cihaza kurulması için kullanılır.\",\n    'tr-other-help': 'Diğer imaj türü.',\n    'tr-build-successful': 'Oluşturma başarılı',\n    'tr-build-failed': 'Oluşturma başarısız',\n    'tr-request-image': 'Imaj oluştur',\n    'tr-check-again': '5 saniye icinde tekrar dene...',\n  },\n};\n\nexport default translations;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport translations from './locales/translations';\n\nconst resources = {\n  ca: {\n    translation: translations.ca,\n  },\n  en: {\n    translation: translations.en,\n  },\n  es: {\n    translation: translations.es,\n  },\n  de: {\n    translation: translations.de,\n  },\n  fr: {\n    translation: translations.fr,\n  },\n  it: {\n    translation: translations.it,\n  },\n  no: {\n    translation: translations.no,\n  },\n  pl: {\n    translation: translations.pl,\n  },\n  tr: {\n    translation: translations.tr,\n  },\n};\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources,\n    fallbackLng: 'en',\n    debug: (process.env.REACT_APP_I18N_DEBUG || '0') === '1',\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n  });\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}