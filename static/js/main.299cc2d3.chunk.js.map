{"version":3,"sources":["images/logo-white.svg","locales/index.ts","components/Header/index.tsx","containers/home/utils/title.ts","containers/home/components/ProfileSearch.tsx","config.ts","containers/home/components/VersionSelector.tsx","utils/api.ts","utils/common.ts","utils/asu.ts","containers/home/components/ProfileDetails.tsx","containers/home/home.tsx","containers/not-found/not-found.tsx","components/Footer.tsx","App.tsx","reportWebVitals.ts","locales/translations.ts","locales/i18n.ts","index.tsx"],"names":["locales","ca","en","es","de","fr","it","no","pl","tr","Header","useTranslation","t","i18n","languageSwitchAnchorEl","useRef","React","useState","showLanguageSwitch","toggleLanguageSwitch","AppBar","position","className","Toolbar","src","logo","Typography","variant","component","style","flexGrow","Box","Button","data-testid","aria-controls","aria-haspopup","color","onClick","ref","language","Menu","id","open","anchorEl","current","onClose","Object","keys","map","l","MenuItem","value","changeLanguage","handleLanguageChange","Checkbox","size","checked","getTitle","title","vendor","model","overviewData","ProfileSearch","selectedVersion","onProfileChange","searchData","setSearchData","working","toggleWorking","getSearchData","useCallback","a","overview","searchDataArray","overviewPath","process","Axios","get","response","data","profiles","forEach","profile","titles","titleEntity","push","search","useEffect","then","_searchData","isEqual","CircularProgress","Autocomplete","options","getOptionLabel","option","renderInput","params","TextField","fullWidth","label","filterOptions","inputValue","throttle","matchSorter","replaceAll","slice","onChange","_","searchDataRow","config","show_help","versions","SNAPSHOT","default_version","image_url","info_url","asu_url","VersionSelector","onVersionChange","FormControl","InputLabel","Select","labelWidth","labelId","event","version","target","buildNew","packages","axios","post","diff_packages","checkBuild","request_hash","sleep","ms","Promise","resolve","setTimeout","build","buildStatusCallback","api","buildResponse","status","checkBuildResponse","useStyles","makeStyles","chip","border","profilesData","ProfileDetails","selectedProfile","classes","setProfile","showAddPackages","setShowAddPackages","Set","customPackages","setCustomPackages","customPackagesInputValue","setCustomPackagesInputValue","showPackageExistsError","setShowPackageExistsError","buildStatus","setBuildStatus","setBuildResponse","buildError","setBuildError","getHelpKey","type","lc","toLowerCase","includes","preExistingPackages","_profile","Array","from","default_packages","device_packages","getProfileData","profileData","mounted","_profileData","appendAddPackageInput","e","key","prev","add","onBuildStatusChange","buildCustomImage","asu","values","version_number","console","log","message","undefined","buildAt","DateTime","fromFormat","build_at","toLocaleString","DATETIME_MED","hasAbilityToBuildCustomPackages","canBuild","paddingTop","paddingBottom","align","TableContainer","Table","TableBody","TableRow","TableCell","join","version_code","titleString","infoUrl","replace","encodeURI","Link","href","length","Launch","marginLeft","verticalAlign","reduce","acc","curr","i","display","marginRight","TableHead","images","downloadURL","name","endIcon","CloudDownload","p","sha256","mb","ml","isDefaultPackage","pr","pb","Chip","onDelete","newSet","delete","fontSize","Input","currentTarget","onKeyUp","endAdornment","InputAdornment","IconButton","Add","pt","mt","disabled","Grid","container","alignContent","direction","alignItems","spacing","item","substr","zone","setZone","Home","setSelectedVersion","setSelectedProfile","Container","paddingY","Paper","padding","xs","NotFound","marginTop","elevation","Footer","hidden","theme","createMuiTheme","palette","primary","main","contrastText","secondary","typography","h1","fontWeight","h2","h3","h4","h5","h6","fontFamily","App","ThemeProvider","Suspense","fallback","LinearProgress","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","translations","resources","translation","use","LanguageDetector","initReactI18next","init","fallbackLng","debug","REACT_APP_I18N_DEBUG","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4WAAe,MAA0B,uCCgB1BA,EAZU,CACvBC,GAAI,YACJC,GAAI,UACJC,GAAI,aACJC,GAAI,UACJC,GAAI,cACJC,GAAI,WACJC,GAAI,QACJC,GAAI,SACJC,GAAI,gB,OCmESC,EA7DmB,WAAO,IAAD,EAClBC,cAAZC,EAD8B,EAC9BA,EAAGC,EAD2B,EAC3BA,KAELC,EAAyBC,iBAAiC,MAH1B,EAIaC,IAAMC,UAAS,GAJ5B,mBAI/BC,EAJ+B,KAIXC,EAJW,KActC,OACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,UAAU,SAApC,SACE,eAACC,EAAA,EAAD,WACE,cAAC,IAAD,CAAUC,IAAKC,EAAMH,UAAU,SAC/B,cAACI,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,SACGhB,EAAE,cAEL,qBAAKiB,MAAO,CAAEC,SAAU,KACxB,eAACC,EAAA,EAAD,CAAKV,SAAS,WAAd,UACE,eAACW,EAAA,EAAD,CACEC,cAAY,uBACZC,gBAAc,gBACdC,gBAAc,OACdC,MAAM,YACNT,QAAQ,YACRU,QAnBuB,WAC/BlB,GAAsBD,IAmBdoB,IAAKxB,EAPP,UASE,uBAAMQ,UAAU,uBAAhB,UACGT,EAAK0B,SAAWvC,EAAQa,EAAK0B,UAAY,kBAD5C,WAGA,cAAC,IAAD,OAEF,cAACC,EAAA,EAAD,CACEC,GAAG,gBACHR,cAAY,gBACZS,KAAMxB,EACNyB,SAAU7B,EAAuB8B,QACjCC,QAAS,kBAAM1B,GAAqB,IALtC,SAOG2B,OAAOC,KAAK/C,GAASgD,KAAI,SAACC,GAAD,OACxB,eAACC,EAAA,EAAD,CAEEC,MAAOF,EACPZ,QAAS,kBA1CM,SAACY,GAC5BpC,EAAKuC,eAAeH,GAyCOI,CAAqBJ,IACpChB,cAAA,iBAAuBgB,GAJzB,UAME,cAACK,EAAA,EAAD,CAAUC,KAAK,QAAQC,QAAS3C,EAAK0B,WAAaU,IANpD,IAM2DrC,EAAEZ,EAAQiD,MAL9DA,iB,yHC/DRQ,EAAW,SAACC,GAAD,OACtBA,EAAMA,OAAN,UAAkBA,EAAMC,OAAxB,YAAkCD,EAAME,QCepCC,EAA4C,GA6EnCC,EA3EiC,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,gBAAiBC,EAAsB,EAAtBA,gBAAsB,EACpD/C,mBAAuB,IAD6B,mBACjFgD,EADiF,KACrEC,EADqE,OAEvDjD,oBAAkB,GAFqC,mBAEjFkD,EAFiF,KAExEC,EAFwE,KAGhFxD,EAAMD,cAANC,EAEFyD,EAAgBC,sBAAW,sBAAC,kCAAAC,EAAA,yDAC5BC,EAAWX,EAAaE,GACtBU,EAAgC,GAEtCL,GAAc,GAETI,EAN2B,wBAOxBE,EAPwB,UAONC,6BAPM,iBAOyBZ,EAPzB,2BAQPa,IAAMC,IAAcH,GARb,OAQxBI,EARwB,OAS9BN,EAAWM,EAASC,KACpBlB,EAAaE,GAAmBS,EAVF,eAahCJ,GAAc,GAEdI,EAASQ,SAASC,SAAQ,SAACC,GACzBA,EAAQC,OAAOF,SAAQ,SAACG,GACtB,IAAM1B,EAAQD,EAAS2B,GACvBX,EAAgBY,KAAK,CACnBlC,MAAO+B,EACPI,OAAQJ,EAAQzC,GAAKiB,EACrBA,gBArB0B,kBA0BzBe,GA1ByB,4CA2B/B,CAACV,IAEJwB,qBAAU,WACRlB,IAAgBmB,MAAK,SAACC,GACfC,kBAAQD,EAAaxB,IAAaC,EAAcuB,QAEtD,CAACpB,EAAeJ,EAAYF,IAuB/B,OAAII,EAAgB,cAACwB,EAAA,EAAD,IAGlB,cAACC,EAAA,EAAD,CACE3D,cAAY,sBACZ4D,QAAS5B,EACT6B,eAvBmB,SAACC,GAAD,OAAwBA,EAAOrC,OAwBlDsC,YAtBgB,SAACC,GAAD,OAElB,aADA,CACCC,EAAA,EAAD,2BAAeD,GAAf,IAAuBE,WAAS,EAACxE,QAAQ,WAAWyE,MAAOxF,EAAE,gBAqB3DyF,cAfgB,SAACR,EAAD,OAAYS,EAAZ,EAAYA,WAAZ,OAClBC,oBAAS,WAAO,IAAD,EACb,OAAOC,YAAYX,GAAS,UAAAS,EAAWG,kBAAX,oBAAAH,EAAwB,IAAK,MAAOA,EAAY,CAC1EvD,KAAM,CAAC,YACN2D,MAAM,EAAG,MACX,IAJHH,IAIc,IAWZI,SA9BwB,SAACC,EAAYC,GACnCA,GAAe7C,EAAgB6C,EAAc1D,W,2BCtCtC2D,EArBA,CAEbC,WAAW,EAGXC,SAAU,CAAE,UAAW,eAAgBC,SAAU,iBAGjDC,gBAAiB,UAGjBC,UAAW,oEAGXC,SAAU,uDAIVC,QAAS,8BCoBIC,EA7BmC,SAAC,GAA0C,IAAxCvD,EAAuC,EAAvCA,gBAAiBwD,EAAsB,EAAtBA,gBAC5DP,EAAaF,EAAbE,SACApG,EAAMD,cAANC,EAOR,OACE,eAAC4G,EAAA,EAAD,CAAarB,WAAS,EAACxE,QAAQ,WAA/B,UACE,cAAC8F,EAAA,EAAD,CAAYhF,GAAG,uBAAf,SAAuC7B,EAAE,gBACzC,cAAC8G,EAAA,EAAD,CACEC,WAAY,GACZC,QAAQ,uBACRzE,MAAOY,EACP4C,SAZsB,SAACkB,GAC3B,IAAMC,EAAkBD,EAAME,OAAO5E,MACrCoE,EAAgBO,IAWZ7F,cAAY,iBALd,SAOGa,OAAOC,KAAKiE,GAAUhE,KAAI,SAAC8E,GAAD,OACzB,cAAC5E,EAAA,EAAD,CAAUC,MAAO2E,EAAjB,SACGA,GAD4BA,Y,qKCf1B,GAZH,CACVE,SAAU,SAACC,EAAoB/C,EAAiB4C,GAAtC,OACRI,IAAMC,KAAN,UAAgCrB,EAAOO,QAAvC,cAA4D,CAC1DS,UACA5C,UACA+C,WACAG,eAAe,KAEnBC,WAAY,SAACC,GAAD,OACVJ,IAAMrD,IAAN,UAA+BiC,EAAOO,QAAtC,sBAA2DiB,MCbxD,SAASC,GAAMC,GACpB,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,MCEtD,IA2Be,IAAEI,MA3BN,uCAAG,WACZX,EACA/C,EACA4C,EACAe,GAJY,iBAAAtE,EAAA,sEAMgBuE,GAAQd,SAASC,EAAU/C,EAAS4C,GANpD,OAOiB,OADvBiB,EANM,QAOMC,QAChBH,EAAoB,IAAD,OAAKE,EAAL,cART,uBAYuBD,GAAQT,WAAWU,EAAchE,KAAKuD,cAZ7D,UAawB,OAD5BW,EAZI,QAaaD,OAbb,0CAcDC,EAAmBlE,MAdlB,QAe+B,MAA9BkE,EAAmBD,SACW,WAAnCC,EAAmBlE,KAAKiE,OAC1BH,EAAoB,IAAD,OAAKE,EAAL,cACyB,YAAnCE,EAAmBlE,KAAKiE,QACjCH,EAAoB,uBAnBd,yBAuBJN,GAAM,KAvBF,mEAAH,6DCgCLW,GAAYC,aAAW,iBAAO,CAClCC,KAAM,CACJ,UAAW,CACTC,OAAO,uBAUPC,GAA2C,GAwZlCC,GAtZkC,SAAC,GAA0C,IAAD,UAAvCxF,EAAuC,EAAvCA,gBAAiByF,EAAsB,EAAtBA,gBAC7DC,EAAUP,KADyE,EAE3DjI,qBAF2D,mBAElFiE,EAFkF,KAEzEwE,EAFyE,OAG3CzI,oBAAS,GAHkC,mBAGlF0I,EAHkF,KAGjEC,EAHiE,OAI7C3I,mBAAsB,IAAI4I,KAJmB,mBAIlFC,EAJkF,KAIlEC,EAJkE,OAKzB9I,mBAAiB,IALQ,mBAKlF+I,EALkF,KAKxDC,EALwD,OAM7BhJ,oBAAS,GANoB,mBAMlFiJ,EANkF,KAM1DC,EAN0D,OAOnDlJ,qBAPmD,mBAOlFmJ,EAPkF,KAOrEC,EAPqE,OAQ/CpJ,qBAR+C,mBAQlF8H,GARkF,KAQnEuB,GARmE,QASrDrJ,qBATqD,qBASlFsJ,GATkF,MAStEC,GATsE,MAUjF5J,GAAMD,cAANC,EAEF6J,GAAa,SAACC,GAClB,IAAMC,EAAKD,EAAKE,cAChB,OAAID,EAAGE,SAAS,cACP,kBAELF,EAAGE,SAAS,YAAqB,QAAPF,GAAuB,QAAPA,EACrC,eAELA,EAAGE,SAAS,WAAaF,EAAGE,SAAS,WAAaF,EAAGE,SAAS,UACzD,cAELF,EAAGE,SAAS,QACP,cAELF,EAAGE,SAAS,UACP,cAELF,EAAGE,SAAS,QACP,YAEF,cAGHC,GAAsB,eAACC,EAAD,uDAAY7F,EAAZ,OAC1B8F,MAAMC,KACJ,IAAIpB,IAAJ,uBAAqB,OAARkB,QAAQ,IAARA,OAAA,EAAAA,EAAUG,mBAAoB,IAA3C,aAA4D,OAARH,QAAQ,IAARA,OAAA,EAAAA,EAAUI,kBAAmB,QAG/EC,GAAiB9G,sBAAW,sBAAC,8BAAAC,EAAA,yDAC7B8G,EAAc/B,GAAaE,EAAgB/G,IADd,gCAIRyF,IAAMrD,IAC3B,UAAGF,6BAAH,iBAAkCZ,GAAlC,WACMyF,EAAgBzB,OADtB,YACgCyB,EAAgB/G,GADhD,UAL6B,OAIzBqC,EAJyB,OAQ/BuG,EAAcvG,EAASC,KACvBuE,GAAaE,EAAgB/G,IAAM4I,EATJ,gCAY1BA,GAZ0B,2CAahC,CAACtH,EAAiByF,IAErBjE,qBAAU,WACR,IAAI+F,GAAU,EAQd,OAPAF,KAAiB5F,MAAK,SAAC+F,GACjBD,IAAY5F,kBAAQR,EAASqG,KAC/B7B,EAAW6B,GACXxB,EAAkB,IAAIF,IAAIiB,GAAoBS,SAI3C,WACLD,GAAU,KAEX,CAACvH,EAAiByF,EAAiB4B,GAAgBlG,IAEtD,IAMMsG,GAAwB,SAC5BC,IAEMA,GAAe,UAAVA,EAAEC,MAAqBD,IAAMzB,IACtCD,GAAkB,SAAC4B,GAAU,IAAD,IAE1B,OADAxB,GAA0B,IAExB,OAACjF,QAAD,IAACA,GAAD,UAACA,EAASiG,uBAAV,aAAC,EAA0BN,SAASb,MACpC,OAAC9E,QAAD,IAACA,GAAD,UAACA,EAASgG,wBAAV,aAAC,EAA2BL,SAASb,KAIvCG,GAA0B,GACnBwB,GAHE,IAAI9B,IAAI8B,EAAKC,IAAI5B,OAK5BC,EAA4B,MAI1B4B,GAAsB,SAAC7C,GAC3BqB,EAAerB,IAGjB,IAAK9D,EAAS,OAAO,cAACS,EAAA,EAAD,IAErB,IAAMmG,GAAgB,uCAAG,4BAAAvH,EAAA,6DACvB8F,EAAe,kBADQ,kBAGE0B,GAAInD,MACzBoC,MAAMC,KAAKnB,EAAekC,UAC1B9G,EAAQzC,GACRyC,EAAQ+G,eACRJ,IAPmB,OAGf/G,EAHe,OASrBwF,GAAiBxF,GATI,gDAWrBoH,QAAQC,IAAR,MACA3B,GAAc,KAAE1F,SAASC,KAAKqH,SAZT,QAcvB/B,OAAegC,GAdQ,yDAAH,qDAiBhBC,GAAUC,YAASC,WAAWtH,EAAQuH,SAAU,iBAAiBC,eACrEH,YAASI,cAELC,GAAkC9J,OAAOC,KAAK+D,GAAQ+D,SAAS,WAC/DgC,IAAYnH,kBAAQsF,MAAMC,KAAKnB,EAAekC,UAAWlB,MAE/D,OACE,qCACE,cAAC/I,EAAA,EAAD,CAAK+K,WAAY,EAAGC,cAAe,EAAnC,SACE,cAACrL,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKoL,MAAM,OAA9C,SACGpM,GAAE,wBAIP,cAACqM,EAAA,EAAD,UACE,cAACC,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,UAAYzM,GAAE,cACd,cAACyM,GAAA,EAAD,CAAW5K,GAAG,QAAd,mBACGyC,EAAQC,cADX,aACG,EAAgBnC,KAAI,SAACU,GAAD,OAAWD,EAASC,MAAQ4J,KAAK,WAG1D,eAACF,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,UAAYzM,GAAE,eACd,cAACyM,GAAA,EAAD,CAAW5K,GAAG,SAAd,SAAwByC,EAAQ6C,YAElC,eAACqF,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,UAAYzM,GAAE,gBACd,eAACyM,GAAA,EAAD,WACGnI,EAAQ+G,eADX,KAC6B/G,EAAQqI,aADrC,UAIF,eAACH,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,UAAYzM,GAAE,aACd,cAACyM,GAAA,EAAD,UAAYf,GAAQI,sBAEtB,eAACU,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,mBACA,cAACA,GAAA,EAAD,oBACGnI,EAAQC,cADX,aACG,EACGnC,KAAqB,SAACU,GACtB,IAAM8J,EAAc/J,EAASC,GACvB+J,EAAU3G,EAAOM,SAASsG,QAAQ,UAAWC,UAAUH,IAC7D,OACE,eAACI,GAAA,EAAD,CAAMC,KAAMJ,EAAZ,UAEGvI,EAAQC,OAAQ2I,OAAS,GACxB,cAACpM,EAAA,EAAD,CAAYE,UAAU,OAAtB,SAA8B4L,IAEhC,cAACO,GAAA,EAAD,CACElM,MAAO,CACLmM,WAAY,GACZC,cAAe,cARKT,MAc7BU,QAAO,SAACC,EAAgBC,EAAiBC,GAAlC,MAAgD,CACtDF,EAEA,cAACpM,EAAA,EAAD,CAAKuM,QAAQ,eAAeC,YAAa,GAAQF,GACjDD,kBAOd,cAACrM,EAAA,EAAD,CAAK+K,WAAY,EAAGC,cAAe,EAAnC,SACE,cAACrL,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKoL,MAAM,OAA9C,SACGpM,GAAE,oBAGP,cAACqM,EAAA,EAAD,UACE,eAACC,GAAA,EAAD,WACE,cAACsB,GAAA,EAAD,UACE,eAACpB,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,4BACA,cAACA,GAAA,EAAD,6BAGJ,cAACF,GAAA,EAAD,oBACGjI,EAAQuJ,cADX,aACG,EAAgBzL,KAAI,SAACqL,GACpB,IAAMK,EAAW,UAAM5H,EAAOK,UAC3BuG,QAAQ,WAAYxI,EAAQ6C,QAC5B2F,QAAQ,YAAaxI,EAAQ+G,gBAFf,YAEkCoC,EAAEM,MACrD,OACE,eAACvB,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,UACE,cAACO,GAAA,EAAD,CAAMC,KAAMa,EAAa3G,OAAO,SAAS9F,cAAY,gBAArD,SACE,cAACD,EAAA,EAAD,CAAQ4M,QAAS,cAACC,GAAA,EAAD,IAAmBlN,QAAQ,YAAYS,MAAM,UAA9D,SACGiM,EAAE3D,WAIT,cAAC2C,GAAA,EAAD,UACE,eAACtL,EAAA,EAAD,CAAK+M,EAAG,EAAR,UACE,cAACpN,EAAA,EAAD,UAAad,GAAE,MAAD,OAAO6J,GAAW4D,EAAE3D,UAClC,eAAChJ,EAAA,EAAD,CAAYC,QAAQ,UAApB,wBAA0C0M,EAAEU,iBAXnCL,EAAcL,EAAE3D,gBAoBzC,cAAC3I,EAAA,EAAD,CAAK+K,WAAY,EAAGC,cAAe,EAAnC,SACE,cAACrL,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKoL,MAAM,OAA9C,SACGpM,GAAE,gBAGNsE,EAAQgG,kBAAoBhG,EAAQgG,iBAAiB4C,OAAS,GAC7D,eAAC/L,EAAA,EAAD,CAAKiN,GAAI,EAAT,UACE,cAACtN,EAAA,EAAD,CAAYC,QAAQ,KAAKqL,MAAM,OAA/B,SACGpM,GAAE,sBAFP,UAIGsE,EAAQgG,wBAJX,aAIG,EAA0BoC,KAAK,SAGnCpI,EAAQiG,iBAAmBjG,EAAQiG,gBAAgB2C,OAAS,GAC3D,eAAC/L,EAAA,EAAD,CAAKiN,GAAI,EAAT,UACE,cAACtN,EAAA,EAAD,CAAYC,QAAQ,KAAKqL,MAAM,OAA/B,SACGpM,GAAE,qBAEJsE,EAAQiG,gBAAgBmC,KAAK,SAGjCV,IACC,eAAC7K,EAAA,EAAD,YACI4H,GACA,cAAC3H,EAAA,EAAD,CAAQL,QAAQ,WAAW4B,KAAK,QAAQlB,QArLxB,WACnB6C,IACL0E,GAAoBD,GACpBI,EAAkB,IAAIF,IAAIiB,SAkLlB,gCAIDnB,GACC,qCACE,eAACjI,EAAA,EAAD,CAAYC,QAAQ,KAAKqL,MAAM,OAA/B,UACGpM,GAAE,sBACH,cAACmB,EAAA,EAAD,CAAKuM,QAAQ,eAAeW,GAAI,EAAhC,SACE,cAACrB,GAAA,EAAD,CAAMC,KAAK,2CAA2C9F,OAAO,SAA7D,SACE,cAACrG,EAAA,EAAD,CAAYC,QAAQ,UAApB,qDAIN,uBACCqJ,MAAMC,KAAKnB,EAAekC,UAAUhJ,KAAI,SAAC8L,GAAO,IAAD,EACxCI,EAAgB,UAAGhK,EAAQgG,wBAAX,aAAG,EAA0BL,SAASiE,GAC5D,OACE,cAAC/M,EAAA,EAAD,CAAaoN,GAAI,EAAGC,GAAI,EAAGd,QAAQ,eAAnC,SACE,cAACe,GAAA,EAAD,CACE9L,KAAK,QACL6C,MAAO0I,EACP1M,MAAO8M,EAAmB,UAAY,UACtC5N,UAAWmI,EAAQL,KACnBkG,SACEJ,OACI7C,EACA,kBACEtC,GAAkB,SAAC4B,GACjB,IAAM4D,EAAS,IAAI1F,IAAImB,MAAMC,KAAKU,EAAKK,WAEvC,OADAuD,EAAOC,OAAOV,GACPS,SAbXT,MAoBd,uBACA,eAACtH,EAAA,EAAD,CAAajE,KAAK,QAAlB,UACE,cAACkE,EAAA,EAAD,CAAY5F,MAAO,CAAE4N,SAAU,SAA/B,iCACA,cAACC,GAAA,EAAD,CACEvM,MAAO6G,EACPrD,SAAU,SAAC8E,GAAD,OAAOA,GAAKxB,EAA4BwB,EAAEkE,cAAcxM,QAClEyM,QAASpE,GACTqE,aACE,cAACC,GAAA,EAAD,CAAgBzO,SAAS,MAAzB,SACE,cAAC0O,GAAA,EAAD,CAAYxM,KAAK,QAAQlB,QAAS,kBAAMmJ,MAAxC,SACE,cAACwE,GAAA,EAAD,aAMT9F,GACC,cAACnI,EAAA,EAAD,CAAKkO,GAAI,EAAT,SACE,cAACvO,EAAA,EAAD,CAAYU,MAAM,QAAQT,QAAQ,UAAUC,UAAU,MAAtD,qFAKJ,eAACG,EAAA,EAAD,CAAKmO,GAAI,EAAT,WACI9F,GACA,cAACpI,EAAA,EAAD,CACEL,QAAQ,YACRS,MAAM,UACN+N,UAAWtD,GACXxK,QAASyJ,GAJX,oCASD1B,GACC,mCACE,eAACgG,EAAA,EAAD,CACEC,WAAS,EACTC,aAAa,SACbC,UAAU,MACVC,WAAW,SACXC,QAAS,EALX,UAO0B,kBAAhBrG,GACN,cAACgG,EAAA,EAAD,CAAMM,MAAI,EAAV,SACE,cAAC/K,EAAA,EAAD,MAGJ,cAACyK,EAAA,EAAD,CAAMM,MAAI,EAAV,SAAYtG,eAOvBG,IAAc,cAAC7I,EAAA,EAAD,CAAYU,MAAM,QAAlB,SAA2BmI,KACzCxB,IACC,eAAChH,EAAA,EAAD,CAAKmO,GAAI,EAAT,UACE,cAACxO,EAAA,EAAD,CAAYC,QAAQ,KAApB,0BACA,cAACuL,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,uBACA,cAACA,GAAA,EAAD,CAAW5K,GAAG,QAAd,SACG8J,YAASC,WACRzD,GAAc0D,SAASkE,OAAO,EAAG,IACjC,sBACA,CACEC,KAAM7H,GAAc0D,SAASkE,OAAO,IACpCE,SAAS,IAEXnE,eAAeH,YAASI,uBAKlC,uBACA,uBACA,eAACO,GAAA,EAAD,WACE,cAACsB,GAAA,EAAD,UACE,eAACpB,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,4BACA,cAACA,GAAA,EAAD,6BAGJ,cAACF,GAAA,EAAD,oBACGpE,GAAc0F,cADjB,aACG,EAAsBzL,KAAI,SAACqL,GAC1B,IAAMK,EAAW,UAAM5H,EAAOK,UAC3BuG,QAAQ,WAAYxI,EAAQ6C,QAC5B2F,QAAQ,YAAaxI,EAAQ+G,gBAFf,YAEkCoC,EAAEM,MACrD,OACE,eAACvB,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,UACE,cAACO,GAAA,EAAD,CAAMC,KAAMa,EAAa3G,OAAO,SAAS9F,cAAY,gBAArD,SACE,cAACD,EAAA,EAAD,CAAQ4M,QAAS,cAACC,GAAA,EAAD,IAAmBlN,QAAQ,YAAYS,MAAM,UAA9D,SACGiM,EAAE3D,WAIT,cAAC2C,GAAA,EAAD,UACE,eAACtL,EAAA,EAAD,CAAK+M,EAAG,EAAR,UACE,cAACpN,EAAA,EAAD,UAAad,GAAE,MAAD,OAAO6J,GAAW4D,EAAE3D,UAClC,eAAChJ,EAAA,EAAD,CAAYC,QAAQ,UAApB,wBAA0C0M,EAAEU,iBAXnCL,EAAcL,EAAE3D,wBCjXtCoG,GAnDiB,WAAO,IAAD,EACU7P,mBAAS6B,OAAOC,KAAK+D,EAAOE,UAAU,IADhD,mBAC7BjD,EAD6B,KACZgN,EADY,OAEU9P,qBAFV,mBAE7BuI,EAF6B,KAEZwH,EAFY,KAG5BpQ,EAAMD,cAANC,EAER,OACE,cAACqQ,EAAA,EAAD,UACE,cAAClP,EAAA,EAAD,CAAKmP,SAAU,EAAf,SACE,cAACC,EAAA,EAAD,UACE,eAACpP,EAAA,EAAD,CAAKqP,QAAS,EAAd,UACE,cAACrP,EAAA,EAAD,CAAKgL,cAAe,EAApB,SACE,cAACrL,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKoL,MAAM,OAA9C,SACGpM,EAAE,eAGP,cAACmB,EAAA,EAAD,CAAKgL,cAAe,EAApB,SACE,cAACrL,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKoL,MAAM,OAA9C,SACGpM,EAAE,kBAGP,eAACwP,EAAA,EAAD,CAAMC,WAAS,EAACI,QAAS,EAAzB,UACE,cAACL,EAAA,EAAD,CAAMM,MAAI,EAACW,IAAE,EAAb,SACE,cAAC,EAAD,CACEtN,gBAAiBA,EACjBC,gBAAiBgN,EACjB/O,cAAY,qBAGhB,cAACmO,EAAA,EAAD,CAAMM,MAAI,EAACW,GAAI,EAAf,SACE,cAAC,EAAD,CACEpP,cAAY,mBACZ8B,gBAAiBA,EACjBwD,gBAAiBwJ,SAItBvH,GACC,cAACzH,EAAA,EAAD,UACE,cAAC,GAAD,CACEyH,gBAAiBA,EACjBzF,gBAAiBA,gBC/BpBuN,GAfqB,kBAClC,cAACL,EAAA,EAAD,CAAWpP,MAAO,CAAE0P,UAAW,QAA/B,SACE,cAACJ,EAAA,EAAD,CAAOK,UAAW,EAAlB,SACE,eAACzP,EAAA,EAAD,CAAKqP,QAAS,EAAd,UACE,cAAC1P,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAnC,gCAGA,eAACF,EAAA,EAAD,CAAYE,UAAU,IAAtB,gCACqB,cAACgM,GAAA,EAAD,CAAMC,KAAMlJ,6BAAZ,kBADrB,eCWO8M,GAlBmB,WAChC,OACE,qCACE,cAAClQ,EAAA,EAAD,CAASmQ,QAAM,IACf,eAACP,EAAA,EAAD,CAAOK,UAAW,EAAGlQ,UAAU,2BAA/B,UACE,qFACoD,IAClD,mBAAGuM,KAAK,8DAAR,kBAFF,OAIA,uBAAMvM,UAAU,cAAhB,qCAC2B,IACzB,mBAAGuM,KAAK,4DAAR,8BCFJ8D,GAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,UACNC,aAAc,WAEhBC,UAAW,CACTF,KAAM,YAGVG,WAAY,CACVC,GAAI,CACFC,WAAY,KAEdC,GAAI,CACFD,WAAY,KAEdE,GAAI,CACFF,WAAY,KAEdG,GAAI,CACFH,WAAY,KAEdI,GAAI,CACFJ,WAAY,KAEdK,GAAI,CACFL,WAAY,KAEdM,WAAY,CACV,YACA,gBACA,qBACA,WACA,SACA,SACA,SACA,YACA,YACA,aACA,iBAXU,GAaVpF,KAAK,QAuBIqF,GAnBgB,WAC7B,OACE,cAACC,EAAA,EAAD,CAAejB,MAAOA,GAAtB,SACE,cAAC,IAAMkB,SAAP,CAAgBC,SAAU,cAACC,EAAA,EAAD,IAA1B,SACE,sBAAKzR,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO0R,KAAK,GAAGC,OAAK,EAACrR,UAAWkP,KAChC,cAAC,IAAD,CAAOlP,UAAW0P,UAGtB,cAAC,GAAD,YCxDK4B,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB5N,MAAK,YAAkD,IAA/C6N,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,8BC8QCO,GApRM,CACnBzT,GAAI,CACF,UAAW,mEACX,WAAY,8BACZ,aACE,mJACF,mBAAoB,gBACpB,kBAAmB,+BACnB,eAAgB,gBAChB,mBAAoB,2BACpB,WAAY,QACZ,YAAa,aACb,aAAc,YACd,UAAW,OACX,eAAgB,kBAChB,sBAAuB,kCACvB,kBACE,qLACF,qBACE,2LACF,iBAAkB,4CAClB,iBAAkB,sDAClB,iBAAkB,oDAClB,eACE,0IACF,gBAAiB,2BACjB,sBAAuB,qCACvB,kBAAmB,6BACnB,mBAAoB,oBACpB,iBAAkB,uCAEpBC,GAAI,CACF,iBAAkB,QAClB,cAAe,kBACf,UAAW,4CACX,WAAY,oBACZ,aACE,0FACF,mBAAoB,mBACpB,kBAAmB,eACnB,eAAgB,YAChB,mBAAoB,gBACpB,WAAY,QACZ,YAAa,WACb,aAAc,UACd,UAAW,OACX,eAAgB,oBAChB,sBAAuB,mBACvB,kBACE,8IACF,qBACE,0IACF,iBAAkB,oCAClB,iBAAkB,wCAClB,iBAAkB,oDAClB,eAAgB,gFAChB,gBAAiB,oBACjB,sBAAuB,mBACvB,kBAAmB,eACnB,mBAAoB,gBACpB,iBAAkB,+BAEpBC,GAAI,CACF,cAAe,4BACf,UAAW,oDACX,WAAY,uBACZ,aACE,0GACF,mBAAoB,gCACpB,kBAAmB,+BACnB,eAAgB,eAChB,mBAAoB,2BACpB,WAAY,SACZ,YAAa,aACb,aAAc,aACd,UAAW,OACX,eAAgB,uBAChB,sBAAuB,2BACvB,kBACE,8JACF,qBACE,4JACF,iBAAkB,4CAClB,iBAAkB,wDAClB,iBAAkB,iDAClB,eACE,qHACF,gBAAiB,uBACjB,sBAAuB,yBACvB,kBAAmB,yBACnB,mBAAoB,mBACpB,iBAAkB,uCAEpBI,GAAI,CACF,UAAW,2CACX,WAAY,oBACZ,aAAc,qEACd,mBAAoB,gBACpB,kBAAmB,0BACnB,eAAgB,WAChB,mBAAoB,sBACpB,WAAY,SACZ,YAAa,WACb,aAAc,UACd,UAAW,OACX,eAAgB,gBAChB,sBAAuB,2BACvB,kBACE,wIACF,qBACE,2IACF,iBAAkB,wCAClB,iBAAkB,uCAClB,iBAAkB,yCAClB,eACE,sFACF,gBAAiB,0BACjB,sBAAuB,0BACvB,kBAAmB,yBACnB,mBAAoB,mBACpB,iBAAkB,oCAEpBH,GAAI,CACF,iBAAkB,UAClB,cAAe,uBACf,UAAW,kDACX,WAAY,oBACZ,aAAc,gEACd,mBAAoB,gBACpB,kBAAmB,eACnB,eAAgB,YAChB,mBAAoB,gBACpB,WAAY,QACZ,YAAa,SACb,aAAc,UACd,UAAW,QACX,eAAgB,YAChB,sBAAuB,mBACvB,kBACE,4FACF,qBACE,wJACF,iBAAkB,qCAClB,iBAAkB,6CAClB,iBAAkB,kCAClB,eACE,8GACF,gBAAiB,sBACjB,sBAAuB,oBACvB,kBAAmB,uBACnB,mBAAoB,mBACpB,iBAAkB,uCAEpBC,GAAI,CACF,UAAW,sEACX,WAAY,2BACZ,aACE,sGACF,mBAAoB,QACpB,kBAAmB,wBACnB,eAAgB,mBAChB,mBAAoB,sBACpB,WAAY,YACZ,YAAa,WACb,aAAc,UACd,UAAW,OACX,eAAgB,wBAChB,sBAAuB,yCACvB,kBACE,0KACF,qBACE,0LACF,iBAAkB,0CAClB,iBAAkB,8CAClB,iBAAkB,4DAClB,eACE,qGACF,gBAAiB,sBACjB,sBAAuB,qBACvB,kBAAmB,oBACnB,mBAAoB,iBACpB,iBAAkB,2CAEpBC,GAAI,CACF,UAAW,sDACX,WAAY,oBACZ,aAAc,+EACd,mBAAoB,QACpB,kBAAmB,eACnB,eAAgB,eAChB,mBAAoB,iBACpB,WAAY,SACZ,YAAa,WACb,aAAc,UACd,UAAW,OACX,eAAgB,YAChB,sBAAuB,0BACvB,kBACE,2KACF,qBACE,6JACF,iBAAkB,uCAClB,iBAAkB,2CAClB,iBAAkB,mDAClB,eACE,iGACF,gBAAiB,oBACjB,sBAAuB,+BACvB,kBAAmB,gBACnB,mBAAoB,oBACpB,iBAAkB,kCAEpBE,GAAI,CACF,iBAAkB,QAClB,cAAe,yBACf,UAAW,oCACX,WAAY,oBACZ,aACE,gIACF,mBAAoB,uBACpB,kBAAmB,sCACnB,eAAgB,cAChB,mBAAoB,kCACpB,WAAY,QACZ,YAAa,YACb,aAAc,SACd,UAAW,OACX,eAAgB,qBAChB,sBAAuB,mCACvB,kBACE,oKACF,qBACE,yKACF,iBAAkB,sCAClB,iBAAkB,qCAClB,iBAAkB,qCAClB,eACE,8GACF,gBAAiB,mBACjB,sBAAuB,2CACvB,kBAAmB,2BACnB,mBAAoB,2BACpB,iBAAkB,wCAEpBC,GAAI,CACF,UAAW,8EACX,WAAY,gCACZ,aACE,6JACF,mBAAoB,cACpB,kBAAmB,sBACnB,eAAgB,qBAChB,mBAAoB,2BACpB,WAAY,QACZ,YAAa,WACb,aAAc,WACd,UAAW,QACX,eAAgB,kBAChB,sBAAuB,0BACvB,kBACE,sOACF,qBACE,uMACF,iBAAkB,0CAClB,iBAAkB,kDAClB,iBAAkB,2CAClB,eACE,sHACF,gBAAiB,8BACjB,sBAAuB,yCACvB,kBAAmB,0CACnB,mBAAoB,oBACpB,iBAAkB,mCC9QhBkT,GAAY,CAChB1T,GAAI,CACF2T,YAAaF,GAAazT,IAE5BC,GAAI,CACF0T,YAAaF,GAAaxT,IAE5BC,GAAI,CACFyT,YAAaF,GAAavT,IAE5BC,GAAI,CACFwT,YAAaF,GAAatT,IAE5BC,GAAI,CACFuT,YAAaF,GAAarT,IAE5BC,GAAI,CACFsT,YAAaF,GAAapT,IAE5BC,GAAI,CACFqT,YAAaF,GAAanT,IAE5BC,GAAI,CACFoT,YAAaF,GAAalT,IAE5BC,GAAI,CACFmT,YAAaF,GAAajT,KAI9BI,KACGgT,IAAIC,MACJD,IAAIE,KACJC,KAAK,CACJL,aACAM,YAAa,KACbC,QAASvP,6JAAYwP,qBACrBC,cAAe,CACbC,aAAa,KAIJxT,GAAf,ECvCAyT,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BxB,M","file":"static/js/main.299cc2d3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo-white.71a9cf92.svg\";","type Locales = {\n  [key: string]: string;\n};\n\nconst locales: Locales = {\n  ca: 'Català',\n  en: 'English',\n  es: 'Español',\n  de: 'Deutsch',\n  fr: 'Français',\n  it: 'Italiano',\n  no: 'Norsk',\n  pl: 'Polski',\n  tr: 'Türkçe',\n};\n\nexport default locales;\n","import React, { FunctionComponent, useRef } from 'react';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport {\n  AppBar,\n  Box,\n  Button,\n  Menu,\n  MenuItem,\n  Checkbox,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport { ReactSVG } from 'react-svg';\n\nimport logo from '../../images/logo-white.svg';\nimport locales from '../../locales';\nimport '../../App.scss';\n\nconst Header: FunctionComponent = () => {\n  const { t, i18n } = useTranslation();\n\n  const languageSwitchAnchorEl = useRef<null | HTMLButtonElement>(null);\n  const [showLanguageSwitch, toggleLanguageSwitch] = React.useState(false);\n\n  const handleLanguageChange = (l: string) => {\n    i18n.changeLanguage(l);\n  };\n\n  const openChangeLanguagePopper = () => {\n    toggleLanguageSwitch(!showLanguageSwitch);\n  };\n\n  return (\n    <AppBar position=\"sticky\" className=\"header\">\n      <Toolbar>\n        <ReactSVG src={logo} className=\"logo\" />\n        <Typography variant=\"h5\" component=\"div\">\n          {t('tr-title')}\n        </Typography>\n        <div style={{ flexGrow: 1 }} />\n        <Box position=\"relative\">\n          <Button\n            data-testid=\"language-menu-toggle\"\n            aria-controls=\"language-menu\"\n            aria-haspopup=\"true\"\n            color=\"secondary\"\n            variant=\"contained\"\n            onClick={openChangeLanguagePopper}\n            ref={languageSwitchAnchorEl}\n          >\n            <span className=\"language-toggle-text\">\n              {i18n.language ? locales[i18n.language] : 'change language'} &nbsp;\n            </span>\n            <TranslateIcon />\n          </Button>\n          <Menu\n            id=\"language-menu\"\n            data-testid=\"language-menu\"\n            open={showLanguageSwitch}\n            anchorEl={languageSwitchAnchorEl.current}\n            onClose={() => toggleLanguageSwitch(false)}\n          >\n            {Object.keys(locales).map((l) => (\n              <MenuItem\n                key={l}\n                value={l}\n                onClick={() => handleLanguageChange(l)}\n                data-testid={`locale-${l}`}\n              >\n                <Checkbox size=\"small\" checked={i18n.language === l} /> {t(locales[l])}\n              </MenuItem>\n            ))}\n          </Menu>\n        </Box>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import { TitlesEntity } from '../../../types/overview';\n\nexport const getTitle = (title: TitlesEntity): string =>\n  title.title || `${title.vendor} ${title.model}`;\n\nexport default { getTitle };\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\nimport { CircularProgress, TextField } from '@material-ui/core';\nimport { Autocomplete, AutocompleteRenderInputParams, FilterOptionsState } from '@material-ui/lab';\nimport Axios from 'axios';\nimport { isEqual, throttle } from 'lodash';\nimport { matchSorter } from 'match-sorter';\nimport { useTranslation } from 'react-i18next';\n\nimport { Overview, ProfilesEntity } from '../../../types/overview';\nimport { getTitle } from '../utils/title';\n\ntype Props = {\n  selectedVersion: string;\n  onProfileChange: (profile: ProfilesEntity) => void;\n};\n\ntype SearchData = { value: ProfilesEntity; search: string; title: string };\n\nconst overviewData: { [key: string]: Overview } = {};\n\nconst ProfileSearch: FunctionComponent<Props> = ({ selectedVersion, onProfileChange }) => {\n  const [searchData, setSearchData] = useState<SearchData[]>([]);\n  const [working, toggleWorking] = useState<boolean>(true);\n  const { t } = useTranslation();\n\n  const getSearchData = useCallback(async () => {\n    let overview = overviewData[selectedVersion];\n    const searchDataArray: SearchData[] = [];\n\n    toggleWorking(true);\n\n    if (!overview) {\n      const overviewPath = `${process.env.PUBLIC_URL}/data/${selectedVersion}/overview.json`;\n      const response = await Axios.get<Overview>(overviewPath);\n      overview = response.data;\n      overviewData[selectedVersion] = overview;\n    }\n\n    toggleWorking(false);\n\n    overview.profiles.forEach((profile) => {\n      profile.titles.forEach((titleEntity) => {\n        const title = getTitle(titleEntity);\n        searchDataArray.push({\n          value: profile,\n          search: profile.id + title,\n          title,\n        });\n      });\n    });\n\n    return searchDataArray;\n  }, [selectedVersion]);\n\n  useEffect(() => {\n    getSearchData().then((_searchData) => {\n      if (!isEqual(_searchData, searchData)) setSearchData(_searchData);\n    });\n  }, [getSearchData, searchData, selectedVersion]);\n\n  const handleProfileSelect = (_: unknown, searchDataRow: SearchData | null) => {\n    if (searchDataRow) onProfileChange(searchDataRow.value);\n  };\n\n  const getOptionLabel = (option: SearchData) => option.title;\n\n  const renderInput = (params: AutocompleteRenderInputParams) => (\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    <TextField {...params} fullWidth variant=\"outlined\" label={t('tr-model')} />\n  );\n\n  const filterOptions: (\n    options: SearchData[],\n    state: FilterOptionsState<SearchData>\n  ) => SearchData[] = (options, { inputValue }) =>\n    throttle(() => {\n      return matchSorter(options, inputValue.replaceAll?.(' ', '') || inputValue, {\n        keys: ['search'],\n      }).slice(0, 10);\n    }, 1000)() || [];\n\n  if (working) return <CircularProgress />;\n\n  return (\n    <Autocomplete\n      data-testid=\"search-autocomplete\"\n      options={searchData}\n      getOptionLabel={getOptionLabel}\n      renderInput={renderInput}\n      filterOptions={filterOptions}\n      onChange={handleProfileSelect}\n    />\n  );\n};\n\nexport default ProfileSearch;\n","/* exported config */\n\nconst config = {\n  // Show help text for images\n  show_help: true,\n\n  // Path to overview.json file or URL to the ASU API\n  versions: { '19.07.7': 'data/19.07.7', SNAPSHOT: 'data/SNAPSHOT' },\n\n  // Pre-selected version (optional)\n  default_version: '19.07.7',\n\n  // Image download URL (optional)\n  image_url: 'https://downloads.openwrt.org/releases/{version}/targets/{target}',\n\n  // Info link URL (optional)\n  info_url: 'https://openwrt.org/start?do=search&id=toh&q={title}',\n\n  // Build custom images (optional)\n  // See https://github.com/aparcar/asu\n  asu_url: 'https://chef.libremesh.org',\n};\n\nexport default config;\n","import React, { FunctionComponent } from 'react';\nimport { FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport config from '../../../config';\n\ntype Props = {\n  selectedVersion: string;\n  onVersionChange: (version: string) => void;\n};\n\nconst VersionSelector: FunctionComponent<Props> = ({ selectedVersion, onVersionChange }) => {\n  const { versions } = config;\n  const { t } = useTranslation();\n\n  const handleVersionChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    const version: string = event.target.value as string;\n    onVersionChange(version);\n  };\n\n  return (\n    <FormControl fullWidth variant=\"outlined\">\n      <InputLabel id=\"version-select-label\">{t('tr-version')}</InputLabel>\n      <Select\n        labelWidth={60}\n        labelId=\"version-select-label\"\n        value={selectedVersion}\n        onChange={handleVersionChange}\n        data-testid=\"version-select\"\n      >\n        {Object.keys(versions).map((version) => (\n          <MenuItem value={version} key={version}>\n            {version}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default VersionSelector;\n","import axios from 'axios';\nimport config from '../config';\nimport { GetBuildResponse } from '../types/asu';\n\nconst asu = {\n  buildNew: (packages: string[], profile: string, version: string) =>\n    axios.post<GetBuildResponse>(`${config.asu_url}/api/build`, {\n      version,\n      profile,\n      packages,\n      diff_packages: true,\n    }),\n  checkBuild: (request_hash: string) =>\n    axios.get<GetBuildResponse>(`${config.asu_url}/api/build/${request_hash}`),\n};\n\nexport default { asu };\n","export function sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import api from './api';\nimport { sleep } from './common';\n\nconst build = async (\n  packages: string[],\n  profile: string,\n  version: string,\n  buildStatusCallback: (status: string) => void\n) => {\n  const buildResponse = await api.asu.buildNew(packages, profile, version);\n  if (buildResponse.status === 202) {\n    buildStatusCallback(`#${buildResponse} in queue`);\n  }\n\n  while (true) {\n    const checkBuildResponse = await api.asu.checkBuild(buildResponse.data.request_hash);\n    if (checkBuildResponse.status === 200) {\n      return checkBuildResponse.data;\n    } else if (checkBuildResponse.status === 202) {\n      if (checkBuildResponse.data.status === 'queued') {\n        buildStatusCallback(`#${buildResponse} in queue`);\n      } else if (checkBuildResponse.data.status === 'started') {\n        buildStatusCallback(`Building the image`);\n      }\n    }\n\n    await sleep(5000);\n  }\n};\n\nexport default { build };\n","import React, { FunctionComponent, ReactNode, useCallback, useEffect, useState } from 'react';\nimport {\n  Box,\n  Button,\n  Chip,\n  CircularProgress,\n  FormControl,\n  Grid,\n  IconButton,\n  Input,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from '@material-ui/core';\nimport { Launch, CloudDownload, Add } from '@material-ui/icons';\nimport axios from 'axios';\nimport { isEqual } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { DateTime } from 'luxon';\n\nimport { ProfilesEntity } from '../../../types/overview';\nimport { Profile, TitlesEntity } from '../../../types/profile';\nimport config from '../../../config';\nimport { getTitle } from '../utils/title';\nimport asu from '../../../utils/asu';\nimport { GetBuildResponse } from '../../../types/asu';\n\nconst useStyles = makeStyles(() => ({\n  chip: {\n    '&:focus': {\n      border: `2px solid #000`,\n    },\n  },\n}));\n\ntype Props = {\n  selectedVersion: string;\n  selectedProfile: ProfilesEntity;\n};\n\nconst profilesData: { [key: string]: Profile } = {};\n\nconst ProfileDetails: FunctionComponent<Props> = ({ selectedVersion, selectedProfile }) => {\n  const classes = useStyles();\n  const [profile, setProfile] = useState<Profile>();\n  const [showAddPackages, setShowAddPackages] = useState(false);\n  const [customPackages, setCustomPackages] = useState<Set<string>>(new Set());\n  const [customPackagesInputValue, setCustomPackagesInputValue] = useState<string>('');\n  const [showPackageExistsError, setShowPackageExistsError] = useState(false);\n  const [buildStatus, setBuildStatus] = useState<React.ReactNode>();\n  const [buildResponse, setBuildResponse] = useState<GetBuildResponse>();\n  const [buildError, setBuildError] = useState<string>();\n  const { t } = useTranslation();\n\n  const getHelpKey = (type: string) => {\n    const lc = type.toLowerCase();\n    if (lc.includes('sysupgrade')) {\n      return 'sysupgrade-help';\n    }\n    if (lc.includes('factory') || lc === 'trx' || lc === 'chk') {\n      return 'factory-help';\n    }\n    if (lc.includes('kernel') || lc.includes('zimage') || lc.includes('uimage')) {\n      return 'kernel-help';\n    }\n    if (lc.includes('root')) {\n      return 'rootfs-help';\n    }\n    if (lc.includes('sdcard')) {\n      return 'sdcard-help';\n    }\n    if (lc.includes('tftp')) {\n      return 'tftp-help';\n    }\n    return 'other-help';\n  };\n\n  const preExistingPackages = (_profile = profile) =>\n    Array.from(\n      new Set([...(_profile?.default_packages || []), ...(_profile?.device_packages || [])])\n    );\n\n  const getProfileData = useCallback(async () => {\n    let profileData = profilesData[selectedProfile.id];\n\n    if (!profileData) {\n      const response = await axios.get<Profile>(\n        `${process.env.PUBLIC_URL}/data/${selectedVersion}` +\n          `/${selectedProfile.target}/${selectedProfile.id}.json`\n      );\n      profileData = response.data;\n      profilesData[selectedProfile.id] = profileData;\n    }\n\n    return profileData;\n  }, [selectedVersion, selectedProfile]);\n\n  useEffect(() => {\n    let mounted = true;\n    getProfileData().then((_profileData) => {\n      if (mounted && !isEqual(profile, _profileData)) {\n        setProfile(_profileData);\n        setCustomPackages(new Set(preExistingPackages(_profileData)));\n      }\n    });\n\n    return () => {\n      mounted = false;\n    };\n  }, [selectedVersion, selectedProfile, getProfileData, profile]);\n\n  const toggleAddPackages = () => {\n    if (!profile) return;\n    setShowAddPackages(!showAddPackages);\n    setCustomPackages(new Set(preExistingPackages()));\n  };\n\n  const appendAddPackageInput = (\n    e?: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    if (((e && e.key === 'Enter') || !e) && customPackagesInputValue) {\n      setCustomPackages((prev) => {\n        setShowPackageExistsError(false);\n        if (\n          !profile?.device_packages?.includes(customPackagesInputValue) &&\n          !profile?.default_packages?.includes(customPackagesInputValue)\n        ) {\n          return new Set(prev.add(customPackagesInputValue));\n        }\n        setShowPackageExistsError(true);\n        return prev;\n      });\n      setCustomPackagesInputValue('');\n    }\n  };\n\n  const onBuildStatusChange = (status: string) => {\n    setBuildStatus(status);\n  };\n\n  if (!profile) return <CircularProgress />;\n\n  const buildCustomImage = async () => {\n    setBuildStatus('Please wait...');\n    try {\n      const response = await asu.build(\n        Array.from(customPackages.values()),\n        profile.id,\n        profile.version_number,\n        onBuildStatusChange\n      );\n      setBuildResponse(response);\n    } catch (e) {\n      console.log(e);\n      setBuildError(e.response.data.message);\n    }\n    setBuildStatus(undefined);\n  };\n\n  const buildAt = DateTime.fromFormat(profile.build_at, 'yyyy-MM-dd TT').toLocaleString(\n    DateTime.DATETIME_MED\n  );\n  const hasAbilityToBuildCustomPackages = Object.keys(config).includes('asu_url');\n  const canBuild = !isEqual(Array.from(customPackages.values()), preExistingPackages());\n\n  return (\n    <>\n      <Box paddingTop={3} paddingBottom={2}>\n        <Typography variant=\"h5\" component=\"h3\" align=\"left\">\n          {t('tr-version-build')}\n        </Typography>\n      </Box>\n\n      <TableContainer>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>{t('tr-model')}</TableCell>\n              <TableCell id=\"title\">\n                {profile.titles?.map((title) => getTitle(title)).join(', ')}\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>{t('tr-target')}</TableCell>\n              <TableCell id=\"target\">{profile.target}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>{t('tr-version')}</TableCell>\n              <TableCell>\n                {profile.version_number} ({profile.version_code})\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>{t('tr-date')}</TableCell>\n              <TableCell>{buildAt.toLocaleString()}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Info</TableCell>\n              <TableCell>\n                {profile.titles\n                  ?.map<React.ReactNode>((title: TitlesEntity) => {\n                    const titleString = getTitle(title);\n                    const infoUrl = config.info_url.replace('{title}', encodeURI(titleString));\n                    return (\n                      <Link href={infoUrl} key={titleString}>\n                        {/* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */}\n                        {profile.titles!.length > 1 && (\n                          <Typography component=\"span\">{titleString}</Typography>\n                        )}\n                        <Launch\n                          style={{\n                            marginLeft: 10,\n                            verticalAlign: 'middle',\n                          }}\n                        />\n                      </Link>\n                    );\n                  })\n                  .reduce((acc: ReactNode, curr: ReactNode, i: number) => [\n                    acc,\n                    // eslint-disable-next-line react/no-array-index-key\n                    <Box display=\"inline-block\" marginRight={2} key={i} />,\n                    curr,\n                  ])}\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Box paddingTop={3} paddingBottom={2}>\n        <Typography variant=\"h5\" component=\"h3\" align=\"left\">\n          {t('tr-downloads')}\n        </Typography>\n      </Box>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Download link</TableCell>\n              <TableCell>Help Text</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {profile.images?.map((i) => {\n              const downloadURL = `${config.image_url\n                .replace('{target}', profile.target)\n                .replace('{version}', profile.version_number)}/${i.name}`;\n              return (\n                <TableRow key={downloadURL + i.type}>\n                  <TableCell>\n                    <Link href={downloadURL} target=\"_blank\" data-testid=\"download_link\">\n                      <Button endIcon={<CloudDownload />} variant=\"contained\" color=\"primary\">\n                        {i.type}\n                      </Button>\n                    </Link>\n                  </TableCell>\n                  <TableCell>\n                    <Box p={1}>\n                      <Typography>{t(`tr-${getHelpKey(i.type)}`)}</Typography>\n                      <Typography variant=\"caption\">sha256sum: {i.sha256}</Typography>\n                    </Box>\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Box paddingTop={3} paddingBottom={2}>\n        <Typography variant=\"h5\" component=\"h3\" align=\"left\">\n          {t('Packages')}\n        </Typography>\n      </Box>\n      {profile.default_packages && profile.default_packages.length > 0 && (\n        <Box mb={2}>\n          <Typography variant=\"h6\" align=\"left\">\n            {t('Default Packages')}\n          </Typography>\n          {profile.default_packages?.join(', ')}\n        </Box>\n      )}\n      {profile.device_packages && profile.device_packages.length > 0 && (\n        <Box mb={2}>\n          <Typography variant=\"h6\" align=\"left\">\n            {t('Device Packages')}\n          </Typography>\n          {profile.device_packages.join(', ')}\n        </Box>\n      )}\n      {hasAbilityToBuildCustomPackages && (\n        <Box>\n          {!showAddPackages && (\n            <Button variant=\"outlined\" size=\"small\" onClick={toggleAddPackages}>\n              customize packages\n            </Button>\n          )}\n          {showAddPackages && (\n            <>\n              <Typography variant=\"h6\" align=\"left\">\n                {t('Customize Packages')}\n                <Box display=\"inline-block\" ml={2}>\n                  <Link href=\"https://openwrt.org/packages/table/start\" target=\"_blank\">\n                    <Typography variant=\"caption\">find packages index on this page</Typography>\n                  </Link>\n                </Box>\n              </Typography>\n              <br />\n              {Array.from(customPackages.values()).map((p) => {\n                const isDefaultPackage = profile.default_packages?.includes(p);\n                return (\n                  <Box key={p} pr={1} pb={1} display=\"inline-block\">\n                    <Chip\n                      size=\"small\"\n                      label={p}\n                      color={isDefaultPackage ? 'default' : 'primary'}\n                      className={classes.chip}\n                      onDelete={\n                        isDefaultPackage\n                          ? undefined\n                          : () =>\n                              setCustomPackages((prev) => {\n                                const newSet = new Set(Array.from(prev.values()));\n                                newSet.delete(p);\n                                return newSet;\n                              })\n                      }\n                    />\n                  </Box>\n                );\n              })}\n              <br />\n              <FormControl size=\"small\">\n                <InputLabel style={{ fontSize: '0.9em' }}>Custom Package Name</InputLabel>\n                <Input\n                  value={customPackagesInputValue}\n                  onChange={(e) => e && setCustomPackagesInputValue(e.currentTarget.value)}\n                  onKeyUp={appendAddPackageInput}\n                  endAdornment={\n                    <InputAdornment position=\"end\">\n                      <IconButton size=\"small\" onClick={() => appendAddPackageInput()}>\n                        <Add />\n                      </IconButton>\n                    </InputAdornment>\n                  }\n                />\n              </FormControl>\n              {showPackageExistsError && (\n                <Box pt={2}>\n                  <Typography color=\"error\" variant=\"caption\" component=\"div\">\n                    This profile already includes this package. Please try a diffrent one\n                  </Typography>\n                </Box>\n              )}\n              <Box mt={3}>\n                {!buildStatus && (\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!canBuild}\n                    onClick={buildCustomImage}\n                  >\n                    build customized image\n                  </Button>\n                )}\n                {buildStatus && (\n                  <>\n                    <Grid\n                      container\n                      alignContent=\"center\"\n                      direction=\"row\"\n                      alignItems=\"center\"\n                      spacing={2}\n                    >\n                      {typeof buildStatus === 'string' && (\n                        <Grid item>\n                          <CircularProgress />\n                        </Grid>\n                      )}\n                      <Grid item>{buildStatus}</Grid>\n                    </Grid>\n                  </>\n                )}\n              </Box>\n            </>\n          )}\n          {buildError && <Typography color=\"error\">{buildError}</Typography>}\n          {buildResponse && (\n            <Box mt={3}>\n              <Typography variant=\"h5\">Built Image:</Typography>\n              <Table>\n                <TableBody>\n                  <TableRow>\n                    <TableCell>Build At</TableCell>\n                    <TableCell id=\"title\">\n                      {DateTime.fromFormat(\n                        buildResponse.build_at.substr(0, 25),\n                        'ccc, dd MMM yyyy TT',\n                        {\n                          zone: buildResponse.build_at.substr(26),\n                          setZone: true,\n                        }\n                      ).toLocaleString(DateTime.DATETIME_MED)}\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n              <br />\n              <br />\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Download link</TableCell>\n                    <TableCell>Help Text</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {buildResponse.images?.map((i) => {\n                    const downloadURL = `${config.image_url\n                      .replace('{target}', profile.target)\n                      .replace('{version}', profile.version_number)}/${i.name}`;\n                    return (\n                      <TableRow key={downloadURL + i.type}>\n                        <TableCell>\n                          <Link href={downloadURL} target=\"_blank\" data-testid=\"download_link\">\n                            <Button endIcon={<CloudDownload />} variant=\"contained\" color=\"primary\">\n                              {i.type}\n                            </Button>\n                          </Link>\n                        </TableCell>\n                        <TableCell>\n                          <Box p={1}>\n                            <Typography>{t(`tr-${getHelpKey(i.type)}`)}</Typography>\n                            <Typography variant=\"caption\">sha256sum: {i.sha256}</Typography>\n                          </Box>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </Box>\n          )}\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default ProfileDetails;\n","import React, { FunctionComponent, useState } from 'react';\nimport { Container, Paper, Box, Typography, Grid } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport ProfileSearch from './components/ProfileSearch';\nimport VersionSelector from './components/VersionSelector';\nimport ProfileDetails from './components/ProfileDetails';\nimport config from '../../config';\nimport { ProfilesEntity } from '../../types/overview';\n\nconst Home: FunctionComponent = () => {\n  const [selectedVersion, setSelectedVersion] = useState(Object.keys(config.versions)[0]);\n  const [selectedProfile, setSelectedProfile] = useState<ProfilesEntity | null>();\n  const { t } = useTranslation();\n\n  return (\n    <Container>\n      <Box paddingY={4}>\n        <Paper>\n          <Box padding={3}>\n            <Box paddingBottom={2}>\n              <Typography variant=\"h4\" component=\"h1\" align=\"left\">\n                {t('tr-load')}\n              </Typography>\n            </Box>\n            <Box paddingBottom={2}>\n              <Typography variant=\"h6\" component=\"h2\" align=\"left\">\n                {t('tr-message')}\n              </Typography>\n            </Box>\n            <Grid container spacing={2}>\n              <Grid item xs>\n                <ProfileSearch\n                  selectedVersion={selectedVersion}\n                  onProfileChange={setSelectedProfile}\n                  data-testid=\"profile-search\"\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <VersionSelector\n                  data-testid=\"version-selector\"\n                  selectedVersion={selectedVersion}\n                  onVersionChange={setSelectedVersion}\n                />\n              </Grid>\n            </Grid>\n            {selectedProfile && (\n              <Box>\n                <ProfileDetails\n                  selectedProfile={selectedProfile}\n                  selectedVersion={selectedVersion}\n                />\n              </Box>\n            )}\n          </Box>\n        </Paper>\n      </Box>\n    </Container>\n  );\n};\n\nexport default Home;\n","import React, { FunctionComponent } from 'react';\nimport { Box, Container, Link, Paper, Typography } from '@material-ui/core';\n\nconst NotFound: FunctionComponent = () => (\n  <Container style={{ marginTop: '50px' }}>\n    <Paper elevation={3}>\n      <Box padding={3}>\n        <Typography variant=\"h5\" component=\"h3\">\n          404 Page Not Found\n        </Typography>\n        <Typography component=\"p\">\n          Please head to the <Link href={process.env.PUBLIC_URL}>home</Link>.\n        </Typography>\n      </Box>\n    </Paper>\n  </Container>\n);\n\nexport default NotFound;\n","import { Paper, Toolbar } from '@material-ui/core';\nimport React, { FunctionComponent } from 'react';\n\nconst Footer: FunctionComponent = () => {\n  return (\n    <>\n      <Toolbar hidden />\n      <Paper elevation={4} className=\"report-problem-container\">\n        <span>\n          If you come across any issue, feel free to report{' '}\n          <a href=\"https://github.com/aparcar/attendedsysupgrade-server/issues\">here</a>.\n        </span>\n        <span className=\"report-link\">\n          For contributions, go to{' '}\n          <a href=\"https://github.com/sudhanshu16/openwrt-firmware-selector/\">Github</a>\n        </span>\n      </Paper>\n    </>\n  );\n};\n\nexport default Footer;\n","import React, { FunctionComponent } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.scss';\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Header from './components/Header';\nimport Home from './containers/home/home';\nimport NotFound from './containers/not-found/not-found';\nimport Footer from './components/Footer';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#00B5E2',\n      contrastText: '#ffffff',\n    },\n    secondary: {\n      main: '#212322',\n    },\n  },\n  typography: {\n    h1: {\n      fontWeight: 600,\n    },\n    h2: {\n      fontWeight: 600,\n    },\n    h3: {\n      fontWeight: 600,\n    },\n    h4: {\n      fontWeight: 600,\n    },\n    h5: {\n      fontWeight: 600,\n    },\n    h6: {\n      fontWeight: 600,\n    },\n    fontFamily: [\n      'Open Sans',\n      '-apple-system',\n      'BlinkMacSystemFont',\n      'Segoe UI',\n      'Roboto',\n      'Oxygen',\n      'Ubuntu',\n      'Cantarell',\n      'Fira Sans',\n      'Droid Sans',\n      'Helvetica Neue',\n      ,\n    ].join(','),\n  },\n});\n\nconst App: FunctionComponent = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <React.Suspense fallback={<LinearProgress />}>\n        <div className=\"App\">\n          <Header />\n          <Router>\n            <Switch>\n              <Route path=\"\" exact component={Home} />\n              <Route component={NotFound} />\n            </Switch>\n          </Router>\n          <Footer />\n        </div>\n      </React.Suspense>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable max-len */\n/* exported translations */\n\nconst translations = {\n  ca: {\n    'tr-load': 'Descarregueu el microprogramari OpenWrt per al vostre dispositiu',\n    'tr-title': 'Selector de microprogramari',\n    'tr-message':\n      'Introduïu el nom o el model del vostre dispositiu i seleccioneu la versió estable (per defecte) o la darrera imatge compilada (\"snapshot\")',\n    'tr-version-build': 'Compilació',\n    'tr-custom-build': 'Compilació personalitzada',\n    'tr-customize': 'Personalitzar',\n    'tr-request-build': 'Demanar la compilació',\n    'tr-model': 'Model',\n    'tr-target': 'Plataforma',\n    'tr-version': 'Versió',\n    'tr-date': 'Data',\n    'tr-downloads': 'Descàrregues',\n    'tr-custom-downloads': 'Descàrregues personalitzades',\n    'tr-factory-help':\n      'Empreu la imatge \"factory\" per instal·lar OpenWrt a un dispositius per primera vegada. Normalment ho podreu fer través de la interfície web del microprogramari original.',\n    'tr-sysupgrade-help':\n      'Empreu la imatge \"sysupgrade\" per actualitzar un dispositiu que ja tingui OpenWrt instal·lat. La imatge es pot instal·lar a través de la interfície web LuCI o del terminal.',\n    'tr-kernel-help': 'El nucli de Linux en una imatge separada.',\n    'tr-rootfs-help': 'El sistema de fitxers arrel en una imatge separada.',\n    'tr-sdcard-help': 'Una imatge feta per escriure-la a una targeta SD.',\n    'tr-tftp-help':\n      \"Les imatges TFTP images es fan servir per instal·lar-les a un dispositiu mitjançant el mètode TFTP del carregador d'arrencada.\",\n    'tr-other-help': \"Un altre tipus d'imatge.\",\n    'tr-build-successful': 'La compilació ha tingut èxit',\n    'tr-build-failed': 'La compilació ha fallat',\n    'tr-request-image': 'Demanar la imatge',\n    'tr-check-again': \"Proveu de nou d'aquí 5 segons...\",\n  },\n  en: {\n    'tr-server-link': 'Files',\n    'tr-notfound': 'No model found!',\n    'tr-load': 'Download OpenWrt Firmware for your Device',\n    'tr-title': 'Firmware Selector',\n    'tr-message':\n      'Type the name or model of your device, then select the recommended build or some other.',\n    'tr-version-build': 'About this build',\n    'tr-custom-build': 'Custom Build',\n    'tr-customize': 'Customize',\n    'tr-request-build': 'Request Build',\n    'tr-model': 'Model',\n    'tr-target': 'Platform',\n    'tr-version': 'Version',\n    'tr-date': 'Date',\n    'tr-downloads': 'Download an image',\n    'tr-custom-downloads': 'Custom Downloads',\n    'tr-factory-help':\n      'Use a Factory image to flash a router with OpenWrt for the first time. You normally do this via the web interface of the original firmware.',\n    'tr-sysupgrade-help':\n      'Use a Sysupgrade image to update a router that already runs OpenWrt. The image can be used with the LuCI web interface or the terminal.',\n    'tr-kernel-help': 'Linux kernel as a separate image.',\n    'tr-rootfs-help': 'Root file system as a separate image.',\n    'tr-sdcard-help': 'Image that is meant to be flashed onto a SD-Card.',\n    'tr-tftp-help': 'TFTP images are used to flash a device via the TFTP method of the bootloader.',\n    'tr-other-help': 'Other image type.',\n    'tr-build-successful': 'Build successful',\n    'tr-build-failed': 'Build failed',\n    'tr-request-image': 'Request image',\n    'tr-check-again': 'Check again in 5 seconds...',\n  },\n  es: {\n    'tr-notfound': '¡Modelo no encontrado!',\n    'tr-load': 'Descargue el firmware OpenWrt para su dispositivo',\n    'tr-title': 'Selector de firmware',\n    'tr-message':\n      'Escriba el nombre o modelo de su dispositivo, luego seleccione la versión recomendada o alguna otra.',\n    'tr-version-build': 'Acerca de esta compilación',\n    'tr-custom-build': 'Compilación personalizada',\n    'tr-customize': 'Personalizar',\n    'tr-request-build': 'Solicitar compilación',\n    'tr-model': 'Modelo',\n    'tr-target': 'Plataforma',\n    'tr-version': 'Versión',\n    'tr-date': 'Date',\n    'tr-downloads': 'Descargar una imagen',\n    'tr-custom-downloads': 'Descargas personalizadas',\n    'tr-factory-help':\n      'Utilice una imagen factory para instalar OpenWrt en un enrutador por primera vez. Normalmente se hace a través de la interfaz web del firmware original.',\n    'tr-sysupgrade-help':\n      'Utilice una imagen sysupgrade para actualizar un enrutador que ya ejecuta OpenWrt. La imagen se puede utilizar con la interfaz web de LuCI o el terminal.',\n    'tr-kernel-help': 'Kernel de Linux como una imagen separada.',\n    'tr-rootfs-help': 'Sistema de archivos raíz como una imagen separada.',\n    'tr-sdcard-help': 'Imagen destinada a flashear en una tarjeta SD.',\n    'tr-tftp-help':\n      'Las imágenes TFTP se utilizan para actualizar un dispositivo mediante el método TFTP del gestor de arranque.',\n    'tr-other-help': 'Otro tipo de imagen.',\n    'tr-build-successful': 'Compilación exitosa',\n    'tr-build-failed': 'Compilación fallida',\n    'tr-request-image': 'Solicitar imagen',\n    'tr-check-again': 'Vuelva a comprobar en 5 segundos...',\n  },\n  no: {\n    'tr-load': 'Last ned OpenWrt fastvare for din enhet!',\n    'tr-title': 'fastvare utvelger',\n    'tr-message': 'Bruk feltene nedenfor for å laste ned fastvare til enheten din!',\n    'tr-version-build': 'Sammensetning',\n    'tr-custom-build': 'Tilpasset sammensetning',\n    'tr-customize': 'Tilpasse',\n    'tr-request-build': 'Be om sammensetning',\n    'tr-model': 'Modell',\n    'tr-target': 'Platform',\n    'tr-version': 'Versjon',\n    'tr-date': 'Dato',\n    'tr-downloads': 'Nedlastninger',\n    'tr-custom-downloads': 'Tilpassede nedlastninger',\n    'tr-factory-help':\n      'Factory avbildningen er for å laste rutere med OpenWrt første gang. Vanligvis via webgrensesnittet til den originale fastvaren.',\n    'tr-sysupgrade-help':\n      'Sysupgrade avbildningen er for rutere som allerede benytter OpenWrt. Avbildningen innstaleres gjennom webgrensesnittet eller terminalen.',\n    'tr-kernel-help': 'Linux kjernen som en egen avbildning.',\n    'tr-rootfs-help': 'Rotfilsystem som en egen avbildning.',\n    'tr-sdcard-help': 'Avbildning som er ment for et SD-kort.',\n    'tr-tftp-help':\n      'TFTP avbildninger er for å laste enheter via TFTP metoden i oppstartsprosedyren.',\n    'tr-other-help': 'Andre avbildningstyper.',\n    'tr-build-successful': 'Vellykket sammensetning',\n    'tr-build-failed': 'Sammensetningen feilet',\n    'tr-request-image': 'Be om avbildning',\n    'tr-check-again': 'Sjekk pånytt om 5 sekunder...',\n  },\n  de: {\n    'tr-server-link': 'Dateien',\n    'tr-notfound': 'Kein Model gefunden!',\n    'tr-load': 'Lade die OpenWrt Firmware für dein Gerät!',\n    'tr-title': 'Firmware Selector',\n    'tr-message': 'Bitte benutze die Eingabe um die passende Firmware zu finden!',\n    'tr-version-build': 'Release Build',\n    'tr-custom-build': 'Custom Build',\n    'tr-customize': 'Customize',\n    'tr-request-build': 'Request Build',\n    'tr-model': 'Model',\n    'tr-target': 'Target',\n    'tr-version': 'Version',\n    'tr-date': 'Datum',\n    'tr-downloads': 'Downloads',\n    'tr-custom-downloads': 'Custom Downloads',\n    'tr-factory-help':\n      'Factory Abbilder werden über die Weboberfläche der originalen Firmware eingespielt.',\n    'tr-sysupgrade-help':\n      'Sysupgrade Abbilder werden für Geräte verwendet, die bereits OpenWrt laufen haben. Es ist möglich, existierende Einstellungen beizubehalten.',\n    'tr-kernel-help': 'Linux Kernel als separates Abbild.',\n    'tr-rootfs-help': 'Das Root Dateisystem als separates Abbild.',\n    'tr-sdcard-help': 'Image für SD Speicherkarten.',\n    'tr-tftp-help':\n      'TFTP Dateien können verwendet werden, um ein Gerät über die TFTP Method des Bootloader zu flashen.',\n    'tr-other-help': 'Sonstiger Imagetyp.',\n    'tr-build-successful': 'Build erfolgreich',\n    'tr-build-failed': 'Build fehlgeschlagen',\n    'tr-request-image': 'Frage nach image',\n    'tr-check-again': 'Nochmal nachfragen in 5 Sekunden...',\n  },\n  fr: {\n    'tr-load': 'Télécharger le firmware OpenWrt de votre périphérique !',\n    'tr-title': 'Sélecteur de Firmware',\n    'tr-message':\n      'Utiliser les entrées ci-dessous pour télécharger le firmware de votre périphérique !',\n    'tr-version-build': 'Build',\n    'tr-custom-build': 'Build Personnalisé',\n    'tr-customize': 'Personnalisation',\n    'tr-request-build': 'Requête de Build',\n    'tr-model': 'Modèle',\n    'tr-target': 'Platform',\n    'tr-version': 'Version',\n    'tr-date': 'Date',\n    'tr-downloads': 'Téléchargements',\n    'tr-custom-downloads': 'Téléchargements Personnalusés',\n    'tr-factory-help':\n      \"Les images Factory sont prévues pour flasher les routers avec OpenWrt pour la première fois. Habituellement à partir de l'interface web du firmware d'origine.\",\n    'tr-sysupgrade-help':\n      \"Les images Sysupgrade sont prévues pour flasher les routers fonctionnant déjà avec OpenWrt. L'image peut être installée à travers l'interface web ou par le terminal.\",\n    'tr-kernel-help': 'Linux kernel comme image séparée.',\n    'tr-rootfs-help': 'Root file system comme image séparée.',\n    'tr-sdcard-help': 'Image prévue pour être flashée sur une carte SD.',\n    'tr-tftp-help':\n      'TFTP images prévues pour flasher le périphérique via le démarrage par méthode TFTP.',\n    'tr-other-help': \"Autre type d'image.\",\n    'tr-build-successful': 'Succès du Build',\n    'tr-build-failed': 'Échec du Build',\n    'tr-request-image': \"Demade d'image\",\n    'tr-check-again': 'Essayer à nouveau dans 5 secondes...',\n  },\n  it: {\n    'tr-load': 'Scarica il firmware OpenWrt per il tuo dispositivo!',\n    'tr-title': 'Firmware Selector',\n    'tr-message': 'Usa la casella sottostante per scaricare il firmware per il tuo dispositivo!',\n    'tr-version-build': 'Build',\n    'tr-custom-build': 'Custom Build',\n    'tr-customize': 'Personalizza',\n    'tr-request-build': 'Richiedi Build',\n    'tr-model': 'Modell',\n    'tr-target': 'Platform',\n    'tr-version': 'Version',\n    'tr-date': 'Data',\n    'tr-downloads': 'Downloads',\n    'tr-custom-downloads': 'Download Personalizzati',\n    'tr-factory-help':\n      \"Factory Image sono usate per installare OpenWrt su router per la prima volta. Di solito l'immagine può essere applicata via l'interfaccia web del firmware originale.\",\n    'tr-sysupgrade-help':\n      \"Sysupgrade Image sono usate per flashare router in cui OpenWrt è già installato. L'immagine può essere applicata via interfaccia web o terminale.\",\n    'tr-kernel-help': 'Linux kernel come immagine separata.',\n    'tr-rootfs-help': 'Root file system come immagine separata.',\n    'tr-sdcard-help': 'Immagine da flashare su scheda SD-Card separata.',\n    'tr-tftp-help':\n      'Immagini TFTP images sono usate per flashare un dispositivo con il metodo TFTP del bootloader.',\n    'tr-other-help': 'Other image type.',\n    'tr-build-successful': 'Build compilata con successo',\n    'tr-build-failed': 'Build fallita',\n    'tr-request-image': 'Richiedi immagine',\n    'tr-check-again': 'Prova di nuovo in 5 secondi...',\n  },\n  pl: {\n    'tr-server-link': 'Pliki',\n    'tr-notfound': 'Nie znaleziono modelu!',\n    'tr-load': 'Pobieranie oprogramowania OpenWrt',\n    'tr-title': 'Firmware Selector',\n    'tr-message':\n      'Wprowadź nazwę lub model swojego urządzenia, a następnie wybierz wersję zalecaną lub inną.',\n    'tr-version-build': 'Informacje o obrazie',\n    'tr-custom-build': 'Informacje o zmodyfikowanym obrazie',\n    'tr-customize': 'Modyfikacja',\n    'tr-request-build': 'Żądanie budowy obrazu',\n    'tr-model': 'Model',\n    'tr-target': 'Platforma',\n    'tr-version': 'Wersja',\n    'tr-date': 'Data',\n    'tr-downloads': 'Obrazy do pobrania',\n    'tr-custom-downloads': 'Zmodyfikowane obrazy do pobrania',\n    'tr-factory-help':\n      'Użyj obrazu factory do pierwszej instalacji OpenWrt. Zwykle można go użyć wykorzystując interfejs graficzny oryginalnego oprogramowania.',\n    'tr-sysupgrade-help':\n      'Użyj obrazu sysuprade do aktualizacji routera z zainstalowanym już OpenWrt. Obraz można użyć przez interfejs graficzny LuCI lub konsolę.',\n    'tr-kernel-help': 'Osobny obraz z kernelem linuksowym.',\n    'tr-rootfs-help': 'Osobny obraz z systemem plików.',\n    'tr-sdcard-help': 'Obraz do wgrania na kartę SD.',\n    'tr-tftp-help':\n      'Obraz TFTP służący do aktualizacji urządzenia z wykorzystaniem metody TFTP bootloadera.',\n    'tr-other-help': 'Inny typ obrazu.',\n    'tr-build-successful': 'Budowanie zakończone pomyślnie',\n    'tr-build-failed': 'Błąd budowania',\n    'tr-request-image': 'Żądanie obrazu',\n    'tr-check-again': 'Sprawdź ponownie za 5 sekund...',\n  },\n  tr: {\n    'tr-load': 'Cihazınız için OpenWrt yazılımını indirin!',\n    'tr-title': 'Yazılım Seçicisi',\n    'tr-message':\n      'Cihazınızın adını/modelini girin, ardından Stabil sürümü(varsayılan) veya nightly \"snapshot\" imajini seçin.',\n    'tr-version-build': 'Sürüm',\n    'tr-custom-build': 'Özel Sürüm',\n    'tr-customize': 'Özelleştir',\n    'tr-request-build': 'Sürüm Oluştur',\n    'tr-model': 'Model',\n    'tr-target': 'Platform',\n    'tr-version': 'Versiyon',\n    'tr-date': 'Tarih',\n    'tr-downloads': 'İndirmeler',\n    'tr-custom-downloads': 'Özel İndirmeler',\n    'tr-factory-help':\n      'Bir yönlendiriciyi OpenWrt ile ilk kez flashlamak için bir Fabrika imaji kullanın. Bu normalde orijinal aygıt yazılımının web arayüzü aracılığıyla yapılır.',\n    'tr-sysupgrade-help':\n      'Zaten OpenWrt çalıştıran bir yönlendiriciyi güncellemek için bir Sysupgrade imajı kullanın. Imaj, LuCI web arayüzü veya terminal ile kullanılabilir.',\n    'tr-kernel-help': 'Linux kernel ayrı bir imaj olarak.',\n    'tr-rootfs-help': 'Kök Dosya Sistemi ayrı bir imaj olarak.',\n    'tr-sdcard-help': \"SD-Kart 'a kurulması planlanan imaj\",\n    'tr-tftp-help':\n      \"TFTP imajları, Bootloader 'ın TFTP yöntemi ile bir cihaza kurulması için kullanılır.\",\n    'tr-other-help': 'Diğer imaj türü.',\n    'tr-build-successful': 'Oluşturma başarılı',\n    'tr-build-failed': 'Oluşturma başarısız',\n    'tr-request-image': 'Imaj oluştur',\n    'tr-check-again': '5 saniye icinde tekrar dene...',\n  },\n};\n\nexport default translations;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport translations from './translations';\n\nconst resources = {\n  ca: {\n    translation: translations.ca,\n  },\n  en: {\n    translation: translations.en,\n  },\n  es: {\n    translation: translations.es,\n  },\n  de: {\n    translation: translations.de,\n  },\n  fr: {\n    translation: translations.fr,\n  },\n  it: {\n    translation: translations.it,\n  },\n  no: {\n    translation: translations.no,\n  },\n  pl: {\n    translation: translations.pl,\n  },\n  tr: {\n    translation: translations.tr,\n  },\n};\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources,\n    fallbackLng: 'en',\n    debug: !!process.env.REACT_APP_I18N_DEBUG,\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n  });\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './locales/i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}